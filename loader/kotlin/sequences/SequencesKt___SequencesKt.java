/*
 * Decompiled with CFR 0.150.
 */
package kotlin.sequences;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import kotlin.Deprecated;
import kotlin.DeprecatedSinceKotlin;
import kotlin.DeprecationLevel;
import kotlin.ExperimentalStdlibApi;
import kotlin.ExperimentalUnsignedTypes;
import kotlin.Metadata;
import kotlin.OverloadResolutionByLambdaReturnType;
import kotlin.Pair;
import kotlin.ReplaceWith;
import kotlin.ResultKt;
import kotlin.SinceKotlin;
import kotlin.UInt;
import kotlin.ULong;
import kotlin.Unit;
import kotlin.WasExperimental;
import kotlin.collections.ArraysKt;
import kotlin.collections.CollectionsKt;
import kotlin.collections.Grouping;
import kotlin.collections.IndexedValue;
import kotlin.collections.SetsKt;
import kotlin.collections.SlidingWindowKt;
import kotlin.comparisons.ComparisonsKt;
import kotlin.coroutines.Continuation;
import kotlin.coroutines.intrinsics.IntrinsicsKt;
import kotlin.coroutines.jvm.internal.Boxing;
import kotlin.internal.InlineOnly;
import kotlin.internal.PlatformImplementationsKt;
import kotlin.jvm.JvmName;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.functions.Function2;
import kotlin.jvm.functions.Function3;
import kotlin.jvm.internal.Intrinsics;
import kotlin.jvm.internal.Ref;
import kotlin.sequences.DistinctSequence;
import kotlin.sequences.DropSequence;
import kotlin.sequences.DropTakeSequence;
import kotlin.sequences.DropWhileSequence;
import kotlin.sequences.FilteringSequence;
import kotlin.sequences.FlatteningSequence;
import kotlin.sequences.IndexingSequence;
import kotlin.sequences.MergingSequence;
import kotlin.sequences.Sequence;
import kotlin.sequences.SequenceScope;
import kotlin.sequences.SequencesKt;
import kotlin.sequences.SequencesKt___SequencesJvmKt;
import kotlin.sequences.SequencesKt___SequencesKt;
import kotlin.sequences.TakeSequence;
import kotlin.sequences.TakeWhileSequence;
import kotlin.sequences.TransformingIndexedSequence;
import kotlin.sequences.TransformingSequence;
import kotlin.text.StringsKt;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/*
 * Duplicate member names - consider using --renamedupmembers true
 */
@Metadata(mv={1, 4, 0}, bv={1, 0, 3}, k=5, xi=1, d1={"\u0000\u0098\u0002\n\u0000\n\u0002\u0010\u000b\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u001c\n\u0002\b\u0002\n\u0002\u0010$\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010%\n\u0002\b\b\n\u0002\u0010\u0006\n\u0002\u0010\u0005\n\u0002\b\u0002\n\u0002\u0010\u0007\n\u0000\n\u0002\u0010\b\n\u0000\n\u0002\u0010\t\n\u0000\n\u0002\u0010\n\n\u0002\b\u0002\n\u0002\u0010 \n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0012\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u001f\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\u0000\n\u0002\b\u001a\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\u0004\n\u0002\u0010!\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\r\n\u0002\b\u0006\n\u0002\u0010\u000e\n\u0002\b\f\n\u0002\u0010\u000f\n\u0002\b\f\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0013\n\u0002\u0010\u0011\n\u0002\b+\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010#\n\u0000\n\u0002\u0010\"\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0006\u001a0\u0010\u0000\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00f8\u0001\u0000\u001a\u0016\u0010\u0006\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a0\u0010\u0006\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00f8\u0001\u0000\u001a\u001c\u0010\u0007\u001a\b\u0012\u0004\u0012\u0002H\u00020\b\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001f\u0010\t\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0087\b\u001aT\u0010\n\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001e\u0010\u000e\u001a\u001a\u0012\u0004\u0012\u0002H\u0002\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000f0\u0005H\u0086\b\u00f8\u0001\u0000\u001aB\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\u00020\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u00f8\u0001\u0000\u001a\\\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b\u00f8\u0001\u0000\u001a]\u0010\u0013\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0018\b\u0002\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\u00020\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u00f8\u0001\u0000\u00a2\u0006\u0002\u0010\u0017\u001aw\u0010\u0013\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u0018\b\u0003\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b\u00f8\u0001\u0000\u00a2\u0006\u0002\u0010\u0018\u001ao\u0010\u0019\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u0018\b\u0003\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u001e\u0010\u000e\u001a\u001a\u0012\u0004\u0012\u0002H\u0002\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000f0\u0005H\u0086\b\u00f8\u0001\u0000\u00a2\u0006\u0002\u0010\u0017\u001aB\u0010\u001a\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\f\"\u0004\b\u0001\u0010\r*\b\u0012\u0004\u0012\u0002H\f0\u00032\u0012\u0010\u001b\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u0005H\u0087\b\u00f8\u0001\u0000\u001a]\u0010\u001c\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\f\"\u0004\b\u0001\u0010\r\"\u0018\b\u0002\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\f0\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u001b\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u0005H\u0087\b\u00f8\u0001\u0000\u00a2\u0006\u0002\u0010\u0017\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007\u00a2\u0006\u0002\b \u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007\u00a2\u0006\u0002\b!\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007\u00a2\u0006\u0002\b#\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020$0\u0003H\u0007\u00a2\u0006\u0002\b%\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020&0\u0003H\u0007\u00a2\u0006\u0002\b'\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020(0\u0003H\u0007\u00a2\u0006\u0002\b)\u001a,\u0010*\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$H\u0007\u001aF\u0010*\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\u0018\u0010\u000e\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\u0004\u0012\u0002H-0\u0005H\u0007\u001a+\u0010.\u001a\u00020\u0001\"\t\b\u0000\u0010\u0002\u00a2\u0006\u0002\b/*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002H\u0086\u0002\u00a2\u0006\u0002\u00101\u001a\u0016\u00102\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a0\u00102\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00f8\u0001\u0000\u001a\u001c\u00103\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a6\u00104\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005\u001a$\u00106\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00107\u001a\u00020$\u001a0\u00108\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001a#\u00109\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010:\u001a\u00020$\u00a2\u0006\u0002\u0010;\u001a7\u0010<\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010:\u001a\u00020$2\u0012\u0010=\u001a\u000e\u0012\u0004\u0012\u00020$\u0012\u0004\u0012\u0002H\u00020\u0005\u00a2\u0006\u0002\u0010>\u001a%\u0010?\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010:\u001a\u00020$\u00a2\u0006\u0002\u0010;\u001a0\u0010@\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001aE\u0010A\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010\u0004\u001a#\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010B\u001ad\u0010E\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2'\u0010\u0004\u001a#\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010BH\u0086\b\u00f8\u0001\u0000\u00a2\u0006\u0002\u0010H\u001a$\u0010I\u001a\r\u0012\t\u0012\u0007H-\u00a2\u0006\u0002\bJ0\u0003\"\u0006\b\u0000\u0010-\u0018\u0001*\u0006\u0012\u0002\b\u00030\u0003H\u0086\b\u001a8\u0010K\u001a\u0002HF\"\u0006\b\u0000\u0010-\u0018\u0001\"\u0010\b\u0001\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\u0006\u0012\u0002\b\u00030\u00032\u0006\u0010\u0016\u001a\u0002HFH\u0086\b\u00a2\u0006\u0002\u0010L\u001a0\u0010M\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001a\"\u0010N\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\b\b\u0000\u0010\u0002*\u00020O*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u0003\u001a;\u0010P\u001a\u0002HF\"\u0010\b\u0000\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020G\"\b\b\u0001\u0010\u0002*\u00020O*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF\u00a2\u0006\u0002\u0010L\u001aO\u0010Q\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00f8\u0001\u0000\u00a2\u0006\u0002\u0010R\u001aO\u0010S\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00f8\u0001\u0000\u00a2\u0006\u0002\u0010R\u001a7\u0010T\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0087\b\u00f8\u0001\u0000\u00a2\u0006\u0002\u0010U\u001a7\u0010V\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0087\b\u00f8\u0001\u0000\u00a2\u0006\u0002\u0010U\u001a\u001b\u0010W\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0002\u0010X\u001a5\u0010W\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00f8\u0001\u0000\u00a2\u0006\u0002\u0010U\u001a\u001d\u0010Y\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0002\u0010X\u001a7\u0010Y\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00f8\u0001\u0000\u00a2\u0006\u0002\u0010U\u001aC\u0010Z\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\b0\u0005H\u0007\u00a2\u0006\u0002\b[\u001a<\u0010Z\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\u00030\u0005\u001aX\u0010\\\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032-\u0010\u000e\u001a)\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\b0BH\u0007\u00a2\u0006\u0002\b]\u001aX\u0010\\\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032-\u0010\u000e\u001a)\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\u00030BH\u0007\u00a2\u0006\u0002\b^\u001ar\u0010_\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2-\u0010\u000e\u001a)\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\b0BH\u0087\b\u00f8\u0001\u0000\u00a2\u0006\u0004\b`\u0010H\u001ar\u0010_\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2-\u0010\u000e\u001a)\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\u00030BH\u0087\b\u00f8\u0001\u0000\u00a2\u0006\u0004\ba\u0010H\u001a]\u0010b\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\b0\u0005H\u0087\b\u00f8\u0001\u0000\u00a2\u0006\u0004\bc\u0010R\u001a[\u0010b\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\u00030\u0005H\u0086\b\u00f8\u0001\u0000\u00a2\u0006\u0002\u0010R\u001aX\u0010d\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010e\u001a\u0002H-2'\u0010f\u001a#\u0012\u0013\u0012\u0011H-\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(g\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0BH\u0086\b\u00f8\u0001\u0000\u00a2\u0006\u0002\u0010h\u001am\u0010i\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010e\u001a\u0002H-2<\u0010f\u001a8\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0013\u0012\u0011H-\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(g\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0jH\u0086\b\u00f8\u0001\u0000\u00a2\u0006\u0002\u0010k\u001a0\u0010l\u001a\u00020m\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010n\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020m0\u0005H\u0086\b\u00f8\u0001\u0000\u001aE\u0010o\u001a\u00020m\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010n\u001a#\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020m0BH\u0086\b\u00f8\u0001\u0000\u001aH\u0010p\u001a\u0014\u0012\u0004\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u00f8\u0001\u0000\u001ab\u0010p\u001a\u0014\u0012\u0004\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\r0+0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b\u00f8\u0001\u0000\u001aa\u0010q\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u001c\b\u0002\u0010\u0014*\u0016\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u00f8\u0001\u0000\u00a2\u0006\u0002\u0010\u0017\u001a{\u0010q\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u001c\b\u0003\u0010\u0014*\u0016\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\r0r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b\u00f8\u0001\u0000\u00a2\u0006\u0002\u0010\u0018\u001aD\u0010s\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0t\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0014\b\u0004\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0087\b\u00f8\u0001\u0000\u001a(\u0010u\u001a\u00020$\"\t\b\u0000\u0010\u0002\u00a2\u0006\u0002\b/*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002\u00a2\u0006\u0002\u0010v\u001a0\u0010w\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00f8\u0001\u0000\u001a0\u0010x\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00f8\u0001\u0000\u001a\u0080\u0001\u0010y\u001a\u0002Hz\"\u0004\b\u0000\u0010\u0002\"\f\b\u0001\u0010z*\u00060{j\u0002`|*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010}\u001a\u0002Hz2\b\b\u0002\u0010~\u001a\u00020\u007f2\t\b\u0002\u0010\u0080\u0001\u001a\u00020\u007f2\t\b\u0002\u0010\u0081\u0001\u001a\u00020\u007f2\t\b\u0002\u0010\u0082\u0001\u001a\u00020$2\t\b\u0002\u0010\u0083\u0001\u001a\u00020\u007f2\u0016\b\u0002\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u007f\u0018\u00010\u0005\u00a2\u0006\u0003\u0010\u0084\u0001\u001af\u0010\u0085\u0001\u001a\u00030\u0086\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\b\b\u0002\u0010~\u001a\u00020\u007f2\t\b\u0002\u0010\u0080\u0001\u001a\u00020\u007f2\t\b\u0002\u0010\u0081\u0001\u001a\u00020\u007f2\t\b\u0002\u0010\u0082\u0001\u001a\u00020$2\t\b\u0002\u0010\u0083\u0001\u001a\u00020\u007f2\u0016\b\u0002\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u007f\u0018\u00010\u0005\u001a\u001c\u0010\u0087\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0002\u0010X\u001a6\u0010\u0087\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00f8\u0001\u0000\u00a2\u0006\u0002\u0010U\u001a)\u0010\u0088\u0001\u001a\u00020$\"\t\b\u0000\u0010\u0002\u00a2\u0006\u0002\b/*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002\u00a2\u0006\u0002\u0010v\u001a\u001e\u0010\u0089\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0002\u0010X\u001a8\u0010\u0089\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00f8\u0001\u0000\u00a2\u0006\u0002\u0010U\u001a7\u0010\u008a\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u000e\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005\u001aL\u0010\u008b\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010\u000e\u001a#\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0B\u001aR\u0010\u008c\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020O*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010\u000e\u001a%\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0B\u001aq\u0010\u008d\u0001\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020O\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2)\u0010\u000e\u001a%\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0BH\u0086\b\u00f8\u0001\u0000\u00a2\u0006\u0002\u0010H\u001ak\u0010\u008e\u0001\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2'\u0010\u000e\u001a#\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0BH\u0086\b\u00f8\u0001\u0000\u00a2\u0006\u0002\u0010H\u001a=\u0010\u008f\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020O*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0014\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005\u001a\\\u0010\u0090\u0001\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020O\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0014\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u00f8\u0001\u0000\u00a2\u0006\u0002\u0010R\u001aV\u0010\u0091\u0001\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0012\u0010\u000e\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0086\b\u00f8\u0001\u0000\u00a2\u0006\u0002\u0010R\u001a,\u0010\u0092\u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0007\u00a2\u0006\u0003\u0010\u0094\u0001\u001a\u001b\u0010\u0092\u0001\u001a\u0004\u0018\u00010\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007\u00a2\u0006\u0003\u0010\u0095\u0001\u001a\u001b\u0010\u0092\u0001\u001a\u0004\u0018\u00010\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007\u00a2\u0006\u0003\u0010\u0096\u0001\u001aI\u0010\u0097\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\b\u00f8\u0001\u0000\u00a2\u0006\u0002\u0010U\u001aI\u0010\u0098\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\b\u00f8\u0001\u0000\u00a2\u0006\u0002\u0010U\u001aH\u0010\u0099\u0001\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\b\u00f8\u0001\u0000\u00a2\u0006\u0003\u0010\u009a\u0001\u001a1\u0010\u0099\u0001\u001a\u00020\u001e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u001e0\u0005H\u0087\b\u00f8\u0001\u0000\u001a1\u0010\u0099\u0001\u001a\u00020\"\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\"0\u0005H\u0087\b\u00f8\u0001\u0000\u001aJ\u0010\u009b\u0001\u001a\u0004\u0018\u0001H-\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\b\u00f8\u0001\u0000\u00a2\u0006\u0003\u0010\u009a\u0001\u001a9\u0010\u009b\u0001\u001a\u0004\u0018\u00010\u001e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u001e0\u0005H\u0087\b\u00f8\u0001\u0000\u00a2\u0006\u0003\u0010\u009c\u0001\u001a9\u0010\u009b\u0001\u001a\u0004\u0018\u00010\"\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\"0\u0005H\u0087\b\u00f8\u0001\u0000\u00a2\u0006\u0003\u0010\u009d\u0001\u001a\\\u0010\u009e\u0001\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u009f\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H-0\u00a0\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H-`\u00a1\u00012\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\b\u00f8\u0001\u0000\u00a2\u0006\u0003\u0010\u00a2\u0001\u001a^\u0010\u00a3\u0001\u001a\u0004\u0018\u0001H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u009f\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H-0\u00a0\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H-`\u00a1\u00012\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\b\u00f8\u0001\u0000\u00a2\u0006\u0003\u0010\u00a2\u0001\u001a,\u0010\u00a4\u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0007\u00a2\u0006\u0003\u0010\u0094\u0001\u001a\u001b\u0010\u00a4\u0001\u001a\u0004\u0018\u00010\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007\u00a2\u0006\u0003\u0010\u0095\u0001\u001a\u001b\u0010\u00a4\u0001\u001a\u0004\u0018\u00010\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007\u00a2\u0006\u0003\u0010\u0096\u0001\u001a@\u0010\u00a5\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u009f\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020\u00a0\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`\u00a1\u0001H\u0007\u00a2\u0006\u0003\u0010\u00a6\u0001\u001a@\u0010\u00a7\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u009f\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020\u00a0\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`\u00a1\u0001H\u0007\u00a2\u0006\u0003\u0010\u00a6\u0001\u001a,\u0010\u00a8\u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0007\u00a2\u0006\u0003\u0010\u0094\u0001\u001a\u001b\u0010\u00a8\u0001\u001a\u0004\u0018\u00010\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007\u00a2\u0006\u0003\u0010\u0095\u0001\u001a\u001b\u0010\u00a8\u0001\u001a\u0004\u0018\u00010\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007\u00a2\u0006\u0003\u0010\u0096\u0001\u001aI\u0010\u00a9\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\b\u00f8\u0001\u0000\u00a2\u0006\u0002\u0010U\u001aI\u0010\u00aa\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\b\u00f8\u0001\u0000\u00a2\u0006\u0002\u0010U\u001aH\u0010\u00ab\u0001\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\b\u00f8\u0001\u0000\u00a2\u0006\u0003\u0010\u009a\u0001\u001a1\u0010\u00ab\u0001\u001a\u00020\u001e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u001e0\u0005H\u0087\b\u00f8\u0001\u0000\u001a1\u0010\u00ab\u0001\u001a\u00020\"\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\"0\u0005H\u0087\b\u00f8\u0001\u0000\u001aJ\u0010\u00ac\u0001\u001a\u0004\u0018\u0001H-\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\b\u00f8\u0001\u0000\u00a2\u0006\u0003\u0010\u009a\u0001\u001a9\u0010\u00ac\u0001\u001a\u0004\u0018\u00010\u001e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u001e0\u0005H\u0087\b\u00f8\u0001\u0000\u00a2\u0006\u0003\u0010\u009c\u0001\u001a9\u0010\u00ac\u0001\u001a\u0004\u0018\u00010\"\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\"0\u0005H\u0087\b\u00f8\u0001\u0000\u00a2\u0006\u0003\u0010\u009d\u0001\u001a\\\u0010\u00ad\u0001\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u009f\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H-0\u00a0\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H-`\u00a1\u00012\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\b\u00f8\u0001\u0000\u00a2\u0006\u0003\u0010\u00a2\u0001\u001a^\u0010\u00ae\u0001\u001a\u0004\u0018\u0001H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u009f\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H-0\u00a0\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H-`\u00a1\u00012\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\b\u00f8\u0001\u0000\u00a2\u0006\u0003\u0010\u00a2\u0001\u001a,\u0010\u00af\u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0007\u00a2\u0006\u0003\u0010\u0094\u0001\u001a\u001b\u0010\u00af\u0001\u001a\u0004\u0018\u00010\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007\u00a2\u0006\u0003\u0010\u0095\u0001\u001a\u001b\u0010\u00af\u0001\u001a\u0004\u0018\u00010\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007\u00a2\u0006\u0003\u0010\u0096\u0001\u001a@\u0010\u00b0\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u009f\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020\u00a0\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`\u00a1\u0001H\u0007\u00a2\u0006\u0003\u0010\u00a6\u0001\u001a@\u0010\u00b1\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u009f\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020\u00a0\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`\u00a1\u0001H\u0007\u00a2\u0006\u0003\u0010\u00a6\u0001\u001a.\u0010\u00b2\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002H\u0086\u0002\u00a2\u0006\u0003\u0010\u00b3\u0001\u001a8\u0010\u00b2\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010\u00b4\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020\u00b5\u0001H\u0086\u0002\u00a2\u0006\u0003\u0010\u00b6\u0001\u001a/\u0010\u00b2\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u00b4\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\bH\u0086\u0002\u001a/\u0010\u00b2\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u00b4\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0002\u001a.\u0010\u00b7\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002H\u0087\b\u00a2\u0006\u0003\u0010\u00b3\u0001\u001a\u0017\u0010\u00b8\u0001\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a1\u0010\u00b8\u0001\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00f8\u0001\u0000\u001a3\u0010\u00b9\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010n\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020m0\u0005H\u0007\u001aH\u0010\u00ba\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010n\u001a#\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020m0BH\u0007\u001aI\u0010\u00bb\u0001\u001a\u001a\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u000f\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00f8\u0001\u0000\u001a.\u0010\u00bc\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002H\u0086\u0002\u00a2\u0006\u0003\u0010\u00b3\u0001\u001a8\u0010\u00bc\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010\u00b4\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020\u00b5\u0001H\u0086\u0002\u00a2\u0006\u0003\u0010\u00b6\u0001\u001a/\u0010\u00bc\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u00b4\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\bH\u0086\u0002\u001a/\u0010\u00bc\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u00b4\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0002\u001a.\u0010\u00bd\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002H\u0087\b\u00a2\u0006\u0003\u0010\u00b3\u0001\u001a[\u0010\u00be\u0001\u001a\u0003H\u00bf\u0001\"\u0005\b\u0000\u0010\u00bf\u0001\"\t\b\u0001\u0010\u0002*\u0003H\u00bf\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010f\u001a%\u0012\u0014\u0012\u0012H\u00bf\u0001\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(g\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H\u00bf\u00010BH\u0086\b\u00f8\u0001\u0000\u00a2\u0006\u0003\u0010\u00c0\u0001\u001ap\u0010\u00c1\u0001\u001a\u0003H\u00bf\u0001\"\u0005\b\u0000\u0010\u00bf\u0001\"\t\b\u0001\u0010\u0002*\u0003H\u00bf\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032>\u0010f\u001a:\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0014\u0012\u0012H\u00bf\u0001\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(g\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H\u00bf\u00010jH\u0086\b\u00f8\u0001\u0000\u00a2\u0006\u0003\u0010\u00c2\u0001\u001ar\u0010\u00c3\u0001\u001a\u0005\u0018\u0001H\u00bf\u0001\"\u0005\b\u0000\u0010\u00bf\u0001\"\t\b\u0001\u0010\u0002*\u0003H\u00bf\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032>\u0010f\u001a:\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0014\u0012\u0012H\u00bf\u0001\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(g\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H\u00bf\u00010jH\u0087\b\u00f8\u0001\u0000\u00a2\u0006\u0003\u0010\u00c2\u0001\u001a]\u0010\u00c4\u0001\u001a\u0005\u0018\u0001H\u00bf\u0001\"\u0005\b\u0000\u0010\u00bf\u0001\"\t\b\u0001\u0010\u0002*\u0003H\u00bf\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010f\u001a%\u0012\u0014\u0012\u0012H\u00bf\u0001\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(g\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H\u00bf\u00010BH\u0087\b\u00f8\u0001\u0000\u00a2\u0006\u0003\u0010\u00c0\u0001\u001a#\u0010\u00c5\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\b\b\u0000\u0010\u0002*\u00020O*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u0003\u001a\\\u0010\u00c6\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010e\u001a\u0002H-2'\u0010f\u001a#\u0012\u0013\u0012\u0011H-\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(g\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0BH\u0007\u00a2\u0006\u0003\u0010\u00c7\u0001\u001aq\u0010\u00c8\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010e\u001a\u0002H-2<\u0010f\u001a8\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0013\u0012\u0011H-\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(g\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0jH\u0007\u00a2\u0006\u0003\u0010\u00c9\u0001\u001aW\u0010\u00ca\u0001\u001a\t\u0012\u0005\u0012\u0003H\u00bf\u00010\u0003\"\u0005\b\u0000\u0010\u00bf\u0001\"\t\b\u0001\u0010\u0002*\u0003H\u00bf\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010f\u001a%\u0012\u0014\u0012\u0012H\u00bf\u0001\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(g\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H\u00bf\u00010BH\u0007\u001al\u0010\u00cb\u0001\u001a\t\u0012\u0005\u0012\u0003H\u00bf\u00010\u0003\"\u0005\b\u0000\u0010\u00bf\u0001\"\t\b\u0001\u0010\u0002*\u0003H\u00bf\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032>\u0010f\u001a:\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0014\u0012\u0012H\u00bf\u0001\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(g\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H\u00bf\u00010jH\u0007\u001a\\\u0010\u00cc\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010e\u001a\u0002H-2'\u0010f\u001a#\u0012\u0013\u0012\u0011H-\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(g\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0BH\u0007\u00a2\u0006\u0003\u0010\u00c7\u0001\u001aq\u0010\u00cd\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010e\u001a\u0002H-2<\u0010f\u001a8\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0013\u0012\u0011H-\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(g\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0jH\u0007\u00a2\u0006\u0003\u0010\u00c9\u0001\u001aW\u0010\u00ce\u0001\u001a\t\u0012\u0005\u0012\u0003H\u00bf\u00010\u0003\"\u0005\b\u0000\u0010\u00bf\u0001\"\t\b\u0001\u0010\u0002*\u0003H\u00bf\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010f\u001a%\u0012\u0014\u0012\u0012H\u00bf\u0001\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(g\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H\u00bf\u00010BH\u0007\u001al\u0010\u00cf\u0001\u001a\t\u0012\u0005\u0012\u0003H\u00bf\u00010\u0003\"\u0005\b\u0000\u0010\u00bf\u0001\"\t\b\u0001\u0010\u0002*\u0003H\u00bf\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032>\u0010f\u001a:\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0014\u0012\u0012H\u00bf\u0001\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(g\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H\u00bf\u00010jH\u0007\u001a\u001c\u0010\u00d0\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0002\u0010X\u001a6\u0010\u00d0\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00f8\u0001\u0000\u00a2\u0006\u0002\u0010U\u001a\u001e\u0010\u00d1\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0002\u0010X\u001a8\u0010\u00d1\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00f8\u0001\u0000\u00a2\u0006\u0002\u0010U\u001a(\u0010\u00d2\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aL\u0010\u00d3\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0016\b\u0004\u00105\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u00f8\u0001\u0000\u001aL\u0010\u00d4\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0016\b\u0004\u00105\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u00f8\u0001\u0000\u001a(\u0010\u00d5\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a<\u0010\u00d6\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u009f\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020\u00a0\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`\u00a1\u0001\u001a\u0019\u0010\u00d7\u0001\u001a\u00020$*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007\u00a2\u0006\u0003\b\u00d8\u0001\u001a\u0019\u0010\u00d7\u0001\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007\u00a2\u0006\u0003\b\u00d9\u0001\u001a\u0019\u0010\u00d7\u0001\u001a\u00020\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007\u00a2\u0006\u0003\b\u00da\u0001\u001a\u0019\u0010\u00d7\u0001\u001a\u00020$*\b\u0012\u0004\u0012\u00020$0\u0003H\u0007\u00a2\u0006\u0003\b\u00db\u0001\u001a\u0019\u0010\u00d7\u0001\u001a\u00020&*\b\u0012\u0004\u0012\u00020&0\u0003H\u0007\u00a2\u0006\u0003\b\u00dc\u0001\u001a\u0019\u0010\u00d7\u0001\u001a\u00020$*\b\u0012\u0004\u0012\u00020(0\u0003H\u0007\u00a2\u0006\u0003\b\u00dd\u0001\u001a1\u0010\u00de\u0001\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020$0\u0005H\u0086\b\u00f8\u0001\u0000\u001a1\u0010\u00df\u0001\u001a\u00020\u001e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u001e0\u0005H\u0086\b\u00f8\u0001\u0000\u001a7\u0010\u00e0\u0001\u001a\u00020\u001e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u001e0\u0005H\u0087\b\u00f8\u0001\u0000\u00a2\u0006\u0003\b\u00d9\u0001\u001a7\u0010\u00e0\u0001\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020$0\u0005H\u0087\b\u00f8\u0001\u0000\u00a2\u0006\u0003\b\u00db\u0001\u001a7\u0010\u00e0\u0001\u001a\u00020&\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020&0\u0005H\u0087\b\u00f8\u0001\u0000\u00a2\u0006\u0003\b\u00dc\u0001\u001a?\u0010\u00e0\u0001\u001a\u00030\u00e1\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0013\u00105\u001a\u000f\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u00030\u00e1\u00010\u0005H\u0087\b\u00f8\u0001\u0001\u00f8\u0001\u0000\u00a2\u0006\u0006\b\u00e2\u0001\u0010\u00e3\u0001\u001a?\u0010\u00e0\u0001\u001a\u00030\u00e4\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0013\u00105\u001a\u000f\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u00030\u00e4\u00010\u0005H\u0087\b\u00f8\u0001\u0001\u00f8\u0001\u0000\u00a2\u0006\u0006\b\u00e5\u0001\u0010\u00e6\u0001\u001a%\u0010\u00e7\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00107\u001a\u00020$\u001a1\u0010\u00e8\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001a6\u0010\u00e9\u0001\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF\u00a2\u0006\u0002\u0010L\u001a)\u0010\u00ea\u0001\u001a\u0014\u0012\u0004\u0012\u0002H\u00020\u00eb\u0001j\t\u0012\u0004\u0012\u0002H\u0002`\u00ec\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001d\u0010\u00ed\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001d\u0010\u00ee\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020r\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001e\u0010\u00ef\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020\u00f0\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001e\u0010\u00f1\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020\u00f2\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aC\u0010\u00f3\u0001\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\t\b\u0002\u0010\u00f4\u0001\u001a\u00020$2\t\b\u0002\u0010\u00f5\u0001\u001a\u00020\u0001H\u0007\u001a]\u0010\u00f3\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\t\b\u0002\u0010\u00f4\u0001\u001a\u00020$2\t\b\u0002\u0010\u00f5\u0001\u001a\u00020\u00012\u0018\u0010\u000e\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\u0004\u0012\u0002H-0\u0005H\u0007\u001a$\u0010\u00f6\u0001\u001a\u000f\u0012\u000b\u0012\t\u0012\u0004\u0012\u0002H\u00020\u00f7\u00010\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aA\u0010\u00f8\u0001\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u000f0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u00f9\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003H\u0086\u0004\u001ar\u0010\u00f8\u0001\u001a\b\u0012\u0004\u0012\u0002H\r0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u00f9\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u000328\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002\u00a2\u0006\r\bC\u0012\t\bD\u0012\u0005\b\b(\u00fa\u0001\u0012\u0014\u0012\u0012H-\u00a2\u0006\r\bC\u0012\t\bD\u0012\u0005\b\b(\u00fb\u0001\u0012\u0004\u0012\u0002H\r0B\u001a+\u0010\u00fc\u0001\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\u00020\u000f0\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0007\u001a_\u0010\u00fc\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u000328\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002\u00a2\u0006\r\bC\u0012\t\bD\u0012\u0005\b\b(\u00fa\u0001\u0012\u0014\u0012\u0012H\u0002\u00a2\u0006\r\bC\u0012\t\bD\u0012\u0005\b\b(\u00fb\u0001\u0012\u0004\u0012\u0002H-0BH\u0007\u0082\u0002\u000b\n\u0005\b\u009920\u0001\n\u0002\b\u0019\u00a8\u0006\u00fd\u0001"}, d2={"all", "", "T", "Lkotlin/sequences/Sequence;", "predicate", "Lkotlin/Function1;", "any", "asIterable", "", "asSequence", "associate", "", "K", "V", "transform", "Lkotlin/Pair;", "associateBy", "keySelector", "valueTransform", "associateByTo", "M", "", "destination", "(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "associateTo", "associateWith", "valueSelector", "associateWithTo", "average", "", "", "averageOfByte", "averageOfDouble", "", "averageOfFloat", "", "averageOfInt", "", "averageOfLong", "", "averageOfShort", "chunked", "", "size", "R", "contains", "Lkotlin/internal/OnlyInputTypes;", "element", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)Z", "count", "distinct", "distinctBy", "selector", "drop", "n", "dropWhile", "elementAt", "index", "(Lkotlin/sequences/Sequence;I)Ljava/lang/Object;", "elementAtOrElse", "defaultValue", "(Lkotlin/sequences/Sequence;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "elementAtOrNull", "filter", "filterIndexed", "Lkotlin/Function2;", "Lkotlin/ParameterName;", "name", "filterIndexedTo", "C", "", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "filterIsInstance", "Lkotlin/internal/NoInfer;", "filterIsInstanceTo", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;)Ljava/util/Collection;", "filterNot", "filterNotNull", "", "filterNotNullTo", "filterNotTo", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "filterTo", "find", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "findLast", "first", "(Lkotlin/sequences/Sequence;)Ljava/lang/Object;", "firstOrNull", "flatMap", "flatMapIterable", "flatMapIndexed", "flatMapIndexedIterable", "flatMapIndexedSequence", "flatMapIndexedTo", "flatMapIndexedIterableTo", "flatMapIndexedSequenceTo", "flatMapTo", "flatMapIterableTo", "fold", "initial", "operation", "acc", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldIndexed", "Lkotlin/Function3;", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "forEach", "", "action", "forEachIndexed", "groupBy", "groupByTo", "", "groupingBy", "Lkotlin/collections/Grouping;", "indexOf", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)I", "indexOfFirst", "indexOfLast", "joinTo", "A", "Ljava/lang/Appendable;", "Lkotlin/text/Appendable;", "buffer", "separator", "", "prefix", "postfix", "limit", "truncated", "(Lkotlin/sequences/Sequence;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "joinToString", "", "last", "lastIndexOf", "lastOrNull", "map", "mapIndexed", "mapIndexedNotNull", "mapIndexedNotNullTo", "mapIndexedTo", "mapNotNull", "mapNotNullTo", "mapTo", "max", "", "(Lkotlin/sequences/Sequence;)Ljava/lang/Comparable;", "(Lkotlin/sequences/Sequence;)Ljava/lang/Double;", "(Lkotlin/sequences/Sequence;)Ljava/lang/Float;", "maxBy", "maxByOrNull", "maxOf", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Comparable;", "maxOfOrNull", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Double;", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Float;", "maxOfWith", "comparator", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "(Lkotlin/sequences/Sequence;Ljava/util/Comparator;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "maxOfWithOrNull", "maxOrNull", "maxWith", "(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)Ljava/lang/Object;", "maxWithOrNull", "min", "minBy", "minByOrNull", "minOf", "minOfOrNull", "minOfWith", "minOfWithOrNull", "minOrNull", "minWith", "minWithOrNull", "minus", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)Lkotlin/sequences/Sequence;", "elements", "", "(Lkotlin/sequences/Sequence;[Ljava/lang/Object;)Lkotlin/sequences/Sequence;", "minusElement", "none", "onEach", "onEachIndexed", "partition", "plus", "plusElement", "reduce", "S", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceIndexed", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "reduceIndexedOrNull", "reduceOrNull", "requireNoNulls", "runningFold", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;", "runningFoldIndexed", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Lkotlin/sequences/Sequence;", "runningReduce", "runningReduceIndexed", "scan", "scanIndexed", "scanReduce", "scanReduceIndexed", "single", "singleOrNull", "sorted", "sortedBy", "sortedByDescending", "sortedDescending", "sortedWith", "sum", "sumOfByte", "sumOfDouble", "sumOfFloat", "sumOfInt", "sumOfLong", "sumOfShort", "sumBy", "sumByDouble", "sumOf", "Lkotlin/UInt;", "sumOfUInt", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)I", "Lkotlin/ULong;", "sumOfULong", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)J", "take", "takeWhile", "toCollection", "toHashSet", "Ljava/util/HashSet;", "Lkotlin/collections/HashSet;", "toList", "toMutableList", "toMutableSet", "", "toSet", "", "windowed", "step", "partialWindows", "withIndex", "Lkotlin/collections/IndexedValue;", "zip", "other", "a", "b", "zipWithNext", "kotlin-stdlib"}, xs="kotlin/sequences/SequencesKt")
class SequencesKt___SequencesKt
extends SequencesKt___SequencesJvmKt {
    public static final <T> boolean contains(@NotNull Sequence<? extends T> $this$contains, T element) {
        Intrinsics.checkNotNullParameter($this$contains, "$this$contains");
        return SequencesKt.indexOf($this$contains, element) >= 0;
    }

    public static final <T> T elementAt(@NotNull Sequence<? extends T> $this$elementAt, int index) {
        Intrinsics.checkNotNullParameter($this$elementAt, "$this$elementAt");
        return SequencesKt.elementAtOrElse($this$elementAt, index, new Function1<Integer, T>(index){
            final /* synthetic */ int $index;

            public final T invoke(int it) {
                throw (Throwable)new IndexOutOfBoundsException("Sequence doesn't contain element at index " + this.$index + '.');
            }
            {
                this.$index = n;
                super(1);
            }
        });
    }

    public static final <T> T elementAtOrElse(@NotNull Sequence<? extends T> $this$elementAtOrElse, int index, @NotNull Function1<? super Integer, ? extends T> defaultValue) {
        Intrinsics.checkNotNullParameter($this$elementAtOrElse, "$this$elementAtOrElse");
        Intrinsics.checkNotNullParameter(defaultValue, "defaultValue");
        if (index < 0) {
            return defaultValue.invoke(index);
        }
        Iterator<T> iterator2 = $this$elementAtOrElse.iterator();
        int count = 0;
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            if (index != count++) continue;
            return element;
        }
        return defaultValue.invoke(index);
    }

    @Nullable
    public static final <T> T elementAtOrNull(@NotNull Sequence<? extends T> $this$elementAtOrNull, int index) {
        Intrinsics.checkNotNullParameter($this$elementAtOrNull, "$this$elementAtOrNull");
        if (index < 0) {
            return null;
        }
        Iterator<T> iterator2 = $this$elementAtOrNull.iterator();
        int count = 0;
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            if (index != count++) continue;
            return element;
        }
        return null;
    }

    @InlineOnly
    private static final <T> T find(Sequence<? extends T> $this$find, Function1<? super T, Boolean> predicate) {
        T t;
        block1: {
            int $i$f$find = 0;
            Sequence<T> $this$firstOrNull$iv = $this$find;
            boolean $i$f$firstOrNull = false;
            Iterator<T> iterator2 = $this$firstOrNull$iv.iterator();
            while (iterator2.hasNext()) {
                T element$iv = iterator2.next();
                if (!predicate.invoke(element$iv).booleanValue()) continue;
                t = element$iv;
                break block1;
            }
            t = null;
        }
        return t;
    }

    @InlineOnly
    private static final <T> T findLast(Sequence<? extends T> $this$findLast, Function1<? super T, Boolean> predicate) {
        int $i$f$findLast = 0;
        Sequence<T> $this$lastOrNull$iv = $this$findLast;
        boolean $i$f$lastOrNull = false;
        T last$iv = null;
        Iterator<T> iterator2 = $this$lastOrNull$iv.iterator();
        while (iterator2.hasNext()) {
            T element$iv = iterator2.next();
            if (!predicate.invoke(element$iv).booleanValue()) continue;
            last$iv = element$iv;
        }
        return last$iv;
    }

    public static final <T> T first(@NotNull Sequence<? extends T> $this$first) {
        Intrinsics.checkNotNullParameter($this$first, "$this$first");
        Iterator<T> iterator2 = $this$first.iterator();
        if (!iterator2.hasNext()) {
            throw (Throwable)new NoSuchElementException("Sequence is empty.");
        }
        return iterator2.next();
    }

    public static final <T> T first(@NotNull Sequence<? extends T> $this$first, @NotNull Function1<? super T, Boolean> predicate) {
        int $i$f$first = 0;
        Intrinsics.checkNotNullParameter($this$first, "$this$first");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        Iterator<T> iterator2 = $this$first.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            if (!predicate.invoke(element).booleanValue()) continue;
            return element;
        }
        throw (Throwable)new NoSuchElementException("Sequence contains no element matching the predicate.");
    }

    @Nullable
    public static final <T> T firstOrNull(@NotNull Sequence<? extends T> $this$firstOrNull) {
        Intrinsics.checkNotNullParameter($this$firstOrNull, "$this$firstOrNull");
        Iterator<T> iterator2 = $this$firstOrNull.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        return iterator2.next();
    }

    @Nullable
    public static final <T> T firstOrNull(@NotNull Sequence<? extends T> $this$firstOrNull, @NotNull Function1<? super T, Boolean> predicate) {
        int $i$f$firstOrNull = 0;
        Intrinsics.checkNotNullParameter($this$firstOrNull, "$this$firstOrNull");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        Iterator<T> iterator2 = $this$firstOrNull.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            if (!predicate.invoke(element).booleanValue()) continue;
            return element;
        }
        return null;
    }

    public static final <T> int indexOf(@NotNull Sequence<? extends T> $this$indexOf, T element) {
        Intrinsics.checkNotNullParameter($this$indexOf, "$this$indexOf");
        int index = 0;
        Iterator<T> iterator2 = $this$indexOf.iterator();
        while (iterator2.hasNext()) {
            T item = iterator2.next();
            boolean bl = false;
            if (index < 0) {
                CollectionsKt.throwIndexOverflow();
            }
            if (Intrinsics.areEqual(element, item)) {
                return index;
            }
            ++index;
        }
        return -1;
    }

    public static final <T> int indexOfFirst(@NotNull Sequence<? extends T> $this$indexOfFirst, @NotNull Function1<? super T, Boolean> predicate) {
        int $i$f$indexOfFirst = 0;
        Intrinsics.checkNotNullParameter($this$indexOfFirst, "$this$indexOfFirst");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        int index = 0;
        Iterator<T> iterator2 = $this$indexOfFirst.iterator();
        while (iterator2.hasNext()) {
            T item = iterator2.next();
            boolean bl = false;
            if (index < 0) {
                if (PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    CollectionsKt.throwIndexOverflow();
                } else {
                    throw (Throwable)new ArithmeticException("Index overflow has happened.");
                }
            }
            if (predicate.invoke(item).booleanValue()) {
                return index;
            }
            ++index;
        }
        return -1;
    }

    public static final <T> int indexOfLast(@NotNull Sequence<? extends T> $this$indexOfLast, @NotNull Function1<? super T, Boolean> predicate) {
        int $i$f$indexOfLast = 0;
        Intrinsics.checkNotNullParameter($this$indexOfLast, "$this$indexOfLast");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        int lastIndex = -1;
        int index = 0;
        Iterator<T> iterator2 = $this$indexOfLast.iterator();
        while (iterator2.hasNext()) {
            T item = iterator2.next();
            boolean bl = false;
            if (index < 0) {
                if (PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    CollectionsKt.throwIndexOverflow();
                } else {
                    throw (Throwable)new ArithmeticException("Index overflow has happened.");
                }
            }
            if (predicate.invoke(item).booleanValue()) {
                lastIndex = index;
            }
            ++index;
        }
        return lastIndex;
    }

    public static final <T> T last(@NotNull Sequence<? extends T> $this$last) {
        Intrinsics.checkNotNullParameter($this$last, "$this$last");
        Iterator<T> iterator2 = $this$last.iterator();
        if (!iterator2.hasNext()) {
            throw (Throwable)new NoSuchElementException("Sequence is empty.");
        }
        T last = iterator2.next();
        while (iterator2.hasNext()) {
            last = iterator2.next();
        }
        return last;
    }

    public static final <T> T last(@NotNull Sequence<? extends T> $this$last, @NotNull Function1<? super T, Boolean> predicate) {
        int $i$f$last = 0;
        Intrinsics.checkNotNullParameter($this$last, "$this$last");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        T last = null;
        boolean found = false;
        Iterator<T> iterator2 = $this$last.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            if (!predicate.invoke(element).booleanValue()) continue;
            last = element;
            found = true;
        }
        if (!found) {
            throw (Throwable)new NoSuchElementException("Sequence contains no element matching the predicate.");
        }
        return last;
    }

    public static final <T> int lastIndexOf(@NotNull Sequence<? extends T> $this$lastIndexOf, T element) {
        Intrinsics.checkNotNullParameter($this$lastIndexOf, "$this$lastIndexOf");
        int lastIndex = -1;
        int index = 0;
        Iterator<T> iterator2 = $this$lastIndexOf.iterator();
        while (iterator2.hasNext()) {
            T item = iterator2.next();
            boolean bl = false;
            if (index < 0) {
                CollectionsKt.throwIndexOverflow();
            }
            if (Intrinsics.areEqual(element, item)) {
                lastIndex = index;
            }
            ++index;
        }
        return lastIndex;
    }

    @Nullable
    public static final <T> T lastOrNull(@NotNull Sequence<? extends T> $this$lastOrNull) {
        Intrinsics.checkNotNullParameter($this$lastOrNull, "$this$lastOrNull");
        Iterator<T> iterator2 = $this$lastOrNull.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        T last = iterator2.next();
        while (iterator2.hasNext()) {
            last = iterator2.next();
        }
        return last;
    }

    @Nullable
    public static final <T> T lastOrNull(@NotNull Sequence<? extends T> $this$lastOrNull, @NotNull Function1<? super T, Boolean> predicate) {
        int $i$f$lastOrNull = 0;
        Intrinsics.checkNotNullParameter($this$lastOrNull, "$this$lastOrNull");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        T last = null;
        Iterator<T> iterator2 = $this$lastOrNull.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            if (!predicate.invoke(element).booleanValue()) continue;
            last = element;
        }
        return last;
    }

    public static final <T> T single(@NotNull Sequence<? extends T> $this$single) {
        Intrinsics.checkNotNullParameter($this$single, "$this$single");
        Iterator<T> iterator2 = $this$single.iterator();
        if (!iterator2.hasNext()) {
            throw (Throwable)new NoSuchElementException("Sequence is empty.");
        }
        T single = iterator2.next();
        if (iterator2.hasNext()) {
            throw (Throwable)new IllegalArgumentException("Sequence has more than one element.");
        }
        return single;
    }

    public static final <T> T single(@NotNull Sequence<? extends T> $this$single, @NotNull Function1<? super T, Boolean> predicate) {
        int $i$f$single = 0;
        Intrinsics.checkNotNullParameter($this$single, "$this$single");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        T single = null;
        boolean found = false;
        Iterator<T> iterator2 = $this$single.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            if (!predicate.invoke(element).booleanValue()) continue;
            if (found) {
                throw (Throwable)new IllegalArgumentException("Sequence contains more than one matching element.");
            }
            single = element;
            found = true;
        }
        if (!found) {
            throw (Throwable)new NoSuchElementException("Sequence contains no element matching the predicate.");
        }
        return single;
    }

    @Nullable
    public static final <T> T singleOrNull(@NotNull Sequence<? extends T> $this$singleOrNull) {
        Intrinsics.checkNotNullParameter($this$singleOrNull, "$this$singleOrNull");
        Iterator<T> iterator2 = $this$singleOrNull.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        T single = iterator2.next();
        if (iterator2.hasNext()) {
            return null;
        }
        return single;
    }

    @Nullable
    public static final <T> T singleOrNull(@NotNull Sequence<? extends T> $this$singleOrNull, @NotNull Function1<? super T, Boolean> predicate) {
        int $i$f$singleOrNull = 0;
        Intrinsics.checkNotNullParameter($this$singleOrNull, "$this$singleOrNull");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        T single = null;
        boolean found = false;
        Iterator<T> iterator2 = $this$singleOrNull.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            if (!predicate.invoke(element).booleanValue()) continue;
            if (found) {
                return null;
            }
            single = element;
            found = true;
        }
        if (!found) {
            return null;
        }
        return single;
    }

    @NotNull
    public static final <T> Sequence<T> drop(@NotNull Sequence<? extends T> $this$drop, int n) {
        Intrinsics.checkNotNullParameter($this$drop, "$this$drop");
        boolean bl = n >= 0;
        boolean bl2 = false;
        boolean bl3 = false;
        if (!bl) {
            boolean bl4 = false;
            String string = "Requested element count " + n + " is less than zero.";
            throw (Throwable)new IllegalArgumentException(string.toString());
        }
        return n == 0 ? $this$drop : ($this$drop instanceof DropTakeSequence ? ((DropTakeSequence)$this$drop).drop(n) : (Sequence)new DropSequence<T>($this$drop, n));
    }

    @NotNull
    public static final <T> Sequence<T> dropWhile(@NotNull Sequence<? extends T> $this$dropWhile, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter($this$dropWhile, "$this$dropWhile");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        return new DropWhileSequence<T>($this$dropWhile, predicate);
    }

    @NotNull
    public static final <T> Sequence<T> filter(@NotNull Sequence<? extends T> $this$filter, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter($this$filter, "$this$filter");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        return new FilteringSequence<T>($this$filter, true, predicate);
    }

    @NotNull
    public static final <T> Sequence<T> filterIndexed(@NotNull Sequence<? extends T> $this$filterIndexed, @NotNull Function2<? super Integer, ? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter($this$filterIndexed, "$this$filterIndexed");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        return new TransformingSequence(new FilteringSequence((Sequence)new IndexingSequence<T>($this$filterIndexed), true, new Function1<IndexedValue<? extends T>, Boolean>(predicate){
            final /* synthetic */ Function2 $predicate;

            public final boolean invoke(@NotNull IndexedValue<? extends T> it) {
                Intrinsics.checkNotNullParameter(it, "it");
                return (Boolean)this.$predicate.invoke(it.getIndex(), it.getValue());
            }
            {
                this.$predicate = function2;
                super(1);
            }
        }), filterIndexed.2.INSTANCE);
    }

    /*
     * WARNING - void declaration
     */
    @NotNull
    public static final <T, C extends Collection<? super T>> C filterIndexedTo(@NotNull Sequence<? extends T> $this$filterIndexedTo, @NotNull C destination, @NotNull Function2<? super Integer, ? super T, Boolean> predicate) {
        int $i$f$filterIndexedTo = 0;
        Intrinsics.checkNotNullParameter($this$filterIndexedTo, "$this$filterIndexedTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        Sequence<T> $this$forEachIndexed$iv = $this$filterIndexedTo;
        boolean $i$f$forEachIndexed = false;
        int index$iv = 0;
        Iterator<T> iterator2 = $this$forEachIndexed$iv.iterator();
        while (iterator2.hasNext()) {
            void element;
            T item$iv = iterator2.next();
            int n = index$iv++;
            boolean bl = false;
            if (n < 0) {
                if (PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    CollectionsKt.throwIndexOverflow();
                } else {
                    throw (Throwable)new ArithmeticException("Index overflow has happened.");
                }
            }
            T t = item$iv;
            int index = n;
            boolean bl2 = false;
            if (!predicate.invoke(index, element).booleanValue()) continue;
            destination.add(element);
        }
        return destination;
    }

    @NotNull
    public static final /* synthetic */ <R> Sequence<R> filterIsInstance(@NotNull Sequence<?> $this$filterIsInstance) {
        int $i$f$filterIsInstance = 0;
        Intrinsics.checkNotNullParameter($this$filterIsInstance, "$this$filterIsInstance");
        Intrinsics.needClassReification();
        Sequence<?> sequence = SequencesKt.filter($this$filterIsInstance, filterIsInstance.1.INSTANCE);
        if (sequence == null) {
            throw new NullPointerException("null cannot be cast to non-null type kotlin.sequences.Sequence<R>");
        }
        return sequence;
    }

    @NotNull
    public static final /* synthetic */ <R, C extends Collection<? super R>> C filterIsInstanceTo(@NotNull Sequence<?> $this$filterIsInstanceTo, @NotNull C destination) {
        int $i$f$filterIsInstanceTo = 0;
        Intrinsics.checkNotNullParameter($this$filterIsInstanceTo, "$this$filterIsInstanceTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Iterator<?> iterator2 = $this$filterIsInstanceTo.iterator();
        while (iterator2.hasNext()) {
            Object element = iterator2.next();
            Intrinsics.reifiedOperationMarker(3, "R");
            if (!(element instanceof Object)) continue;
            destination.add(element);
        }
        return destination;
    }

    @NotNull
    public static final <T> Sequence<T> filterNot(@NotNull Sequence<? extends T> $this$filterNot, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter($this$filterNot, "$this$filterNot");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        return new FilteringSequence<T>($this$filterNot, false, predicate);
    }

    @NotNull
    public static final <T> Sequence<T> filterNotNull(@NotNull Sequence<? extends T> $this$filterNotNull) {
        Intrinsics.checkNotNullParameter($this$filterNotNull, "$this$filterNotNull");
        Sequence<? extends T> sequence = SequencesKt.filterNot($this$filterNotNull, filterNotNull.1.INSTANCE);
        if (sequence == null) {
            throw new NullPointerException("null cannot be cast to non-null type kotlin.sequences.Sequence<T>");
        }
        return sequence;
    }

    @NotNull
    public static final <C extends Collection<? super T>, T> C filterNotNullTo(@NotNull Sequence<? extends T> $this$filterNotNullTo, @NotNull C destination) {
        Intrinsics.checkNotNullParameter($this$filterNotNullTo, "$this$filterNotNullTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Iterator<T> iterator2 = $this$filterNotNullTo.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            if (element == null) continue;
            destination.add(element);
        }
        return destination;
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C filterNotTo(@NotNull Sequence<? extends T> $this$filterNotTo, @NotNull C destination, @NotNull Function1<? super T, Boolean> predicate) {
        int $i$f$filterNotTo = 0;
        Intrinsics.checkNotNullParameter($this$filterNotTo, "$this$filterNotTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        Iterator<T> iterator2 = $this$filterNotTo.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            if (predicate.invoke(element).booleanValue()) continue;
            destination.add(element);
        }
        return destination;
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C filterTo(@NotNull Sequence<? extends T> $this$filterTo, @NotNull C destination, @NotNull Function1<? super T, Boolean> predicate) {
        int $i$f$filterTo = 0;
        Intrinsics.checkNotNullParameter($this$filterTo, "$this$filterTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        Iterator<T> iterator2 = $this$filterTo.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            if (!predicate.invoke(element).booleanValue()) continue;
            destination.add(element);
        }
        return destination;
    }

    @NotNull
    public static final <T> Sequence<T> take(@NotNull Sequence<? extends T> $this$take, int n) {
        Intrinsics.checkNotNullParameter($this$take, "$this$take");
        boolean bl = n >= 0;
        boolean bl2 = false;
        boolean bl3 = false;
        if (!bl) {
            boolean bl4 = false;
            String string = "Requested element count " + n + " is less than zero.";
            throw (Throwable)new IllegalArgumentException(string.toString());
        }
        return n == 0 ? SequencesKt.emptySequence() : ($this$take instanceof DropTakeSequence ? ((DropTakeSequence)$this$take).take(n) : (Sequence)new TakeSequence<T>($this$take, n));
    }

    @NotNull
    public static final <T> Sequence<T> takeWhile(@NotNull Sequence<? extends T> $this$takeWhile, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter($this$takeWhile, "$this$takeWhile");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        return new TakeWhileSequence<T>($this$takeWhile, predicate);
    }

    @NotNull
    public static final <T extends Comparable<? super T>> Sequence<T> sorted(@NotNull Sequence<? extends T> $this$sorted) {
        Intrinsics.checkNotNullParameter($this$sorted, "$this$sorted");
        return new Sequence<T>($this$sorted){
            final /* synthetic */ Sequence $this_sorted;

            @NotNull
            public Iterator<T> iterator() {
                List<T> sortedList = SequencesKt.toMutableList(this.$this_sorted);
                CollectionsKt.sort(sortedList);
                return sortedList.iterator();
            }
            {
                this.$this_sorted = $receiver;
            }
        };
    }

    @NotNull
    public static final <T, R extends Comparable<? super R>> Sequence<T> sortedBy(@NotNull Sequence<? extends T> $this$sortedBy, @NotNull Function1<? super T, ? extends R> selector) {
        int $i$f$sortedBy = 0;
        Intrinsics.checkNotNullParameter($this$sortedBy, "$this$sortedBy");
        Intrinsics.checkNotNullParameter(selector, "selector");
        boolean bl = false;
        return SequencesKt.sortedWith($this$sortedBy, new Comparator<T>(selector){
            final /* synthetic */ Function1 $selector;

            public final int compare(T a, T b) {
                boolean bl = false;
                return ComparisonsKt.compareValues((Comparable)this.$selector.invoke(a), (Comparable)this.$selector.invoke(b));
            }
            {
                this.$selector = function1;
            }
        });
    }

    @NotNull
    public static final <T, R extends Comparable<? super R>> Sequence<T> sortedByDescending(@NotNull Sequence<? extends T> $this$sortedByDescending, @NotNull Function1<? super T, ? extends R> selector) {
        int $i$f$sortedByDescending = 0;
        Intrinsics.checkNotNullParameter($this$sortedByDescending, "$this$sortedByDescending");
        Intrinsics.checkNotNullParameter(selector, "selector");
        boolean bl = false;
        return SequencesKt.sortedWith($this$sortedByDescending, new Comparator<T>(selector){
            final /* synthetic */ Function1 $selector;

            public final int compare(T a, T b) {
                boolean bl = false;
                return ComparisonsKt.compareValues((Comparable)this.$selector.invoke(b), (Comparable)this.$selector.invoke(a));
            }
            {
                this.$selector = function1;
            }
        });
    }

    @NotNull
    public static final <T extends Comparable<? super T>> Sequence<T> sortedDescending(@NotNull Sequence<? extends T> $this$sortedDescending) {
        Intrinsics.checkNotNullParameter($this$sortedDescending, "$this$sortedDescending");
        return SequencesKt.sortedWith($this$sortedDescending, ComparisonsKt.reverseOrder());
    }

    @NotNull
    public static final <T> Sequence<T> sortedWith(@NotNull Sequence<? extends T> $this$sortedWith, @NotNull Comparator<? super T> comparator) {
        Intrinsics.checkNotNullParameter($this$sortedWith, "$this$sortedWith");
        Intrinsics.checkNotNullParameter(comparator, "comparator");
        return new Sequence<T>($this$sortedWith, comparator){
            final /* synthetic */ Sequence $this_sortedWith;
            final /* synthetic */ Comparator $comparator;

            @NotNull
            public Iterator<T> iterator() {
                List<T> sortedList = SequencesKt.toMutableList(this.$this_sortedWith);
                CollectionsKt.sortWith(sortedList, this.$comparator);
                return sortedList.iterator();
            }
            {
                this.$this_sortedWith = $receiver;
                this.$comparator = $captured_local_variable$1;
            }
        };
    }

    /*
     * WARNING - void declaration
     */
    @NotNull
    public static final <T, K, V> Map<K, V> associate(@NotNull Sequence<? extends T> $this$associate, @NotNull Function1<? super T, ? extends Pair<? extends K, ? extends V>> transform) {
        void $this$associateTo$iv;
        int $i$f$associate = 0;
        Intrinsics.checkNotNullParameter($this$associate, "$this$associate");
        Intrinsics.checkNotNullParameter(transform, "transform");
        Sequence<? extends T> sequence = $this$associate;
        Map destination$iv = new LinkedHashMap();
        boolean $i$f$associateTo = false;
        for (Object element$iv : $this$associateTo$iv) {
            Map map = destination$iv;
            Pair<K, V> pair = transform.invoke(element$iv);
            boolean bl = false;
            map.put(pair.getFirst(), pair.getSecond());
        }
        return destination$iv;
    }

    /*
     * WARNING - void declaration
     */
    @NotNull
    public static final <T, K> Map<K, T> associateBy(@NotNull Sequence<? extends T> $this$associateBy, @NotNull Function1<? super T, ? extends K> keySelector) {
        void $this$associateByTo$iv;
        int $i$f$associateBy = 0;
        Intrinsics.checkNotNullParameter($this$associateBy, "$this$associateBy");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        Sequence<? extends T> sequence = $this$associateBy;
        Map destination$iv = new LinkedHashMap();
        boolean $i$f$associateByTo = false;
        for (Object element$iv : $this$associateByTo$iv) {
            destination$iv.put(keySelector.invoke(element$iv), element$iv);
        }
        return destination$iv;
    }

    /*
     * WARNING - void declaration
     */
    @NotNull
    public static final <T, K, V> Map<K, V> associateBy(@NotNull Sequence<? extends T> $this$associateBy, @NotNull Function1<? super T, ? extends K> keySelector, @NotNull Function1<? super T, ? extends V> valueTransform) {
        void $this$associateByTo$iv;
        int $i$f$associateBy = 0;
        Intrinsics.checkNotNullParameter($this$associateBy, "$this$associateBy");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        Intrinsics.checkNotNullParameter(valueTransform, "valueTransform");
        Sequence<? extends T> sequence = $this$associateBy;
        Map destination$iv = new LinkedHashMap();
        boolean $i$f$associateByTo = false;
        for (Object element$iv : $this$associateByTo$iv) {
            destination$iv.put(keySelector.invoke(element$iv), valueTransform.invoke(element$iv));
        }
        return destination$iv;
    }

    @NotNull
    public static final <T, K, M extends Map<? super K, ? super T>> M associateByTo(@NotNull Sequence<? extends T> $this$associateByTo, @NotNull M destination, @NotNull Function1<? super T, ? extends K> keySelector) {
        int $i$f$associateByTo = 0;
        Intrinsics.checkNotNullParameter($this$associateByTo, "$this$associateByTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        Iterator<T> iterator2 = $this$associateByTo.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            destination.put(keySelector.invoke(element), element);
        }
        return destination;
    }

    @NotNull
    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateByTo(@NotNull Sequence<? extends T> $this$associateByTo, @NotNull M destination, @NotNull Function1<? super T, ? extends K> keySelector, @NotNull Function1<? super T, ? extends V> valueTransform) {
        int $i$f$associateByTo = 0;
        Intrinsics.checkNotNullParameter($this$associateByTo, "$this$associateByTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        Intrinsics.checkNotNullParameter(valueTransform, "valueTransform");
        Iterator<T> iterator2 = $this$associateByTo.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            destination.put(keySelector.invoke(element), valueTransform.invoke(element));
        }
        return destination;
    }

    @NotNull
    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateTo(@NotNull Sequence<? extends T> $this$associateTo, @NotNull M destination, @NotNull Function1<? super T, ? extends Pair<? extends K, ? extends V>> transform) {
        int $i$f$associateTo = 0;
        Intrinsics.checkNotNullParameter($this$associateTo, "$this$associateTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(transform, "transform");
        Iterator<T> iterator2 = $this$associateTo.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            M m = destination;
            Pair<K, V> pair = transform.invoke(element);
            boolean bl = false;
            m.put(pair.getFirst(), pair.getSecond());
        }
        return destination;
    }

    @SinceKotlin(version="1.3")
    @NotNull
    public static final <K, V> Map<K, V> associateWith(@NotNull Sequence<? extends K> $this$associateWith, @NotNull Function1<? super K, ? extends V> valueSelector) {
        int $i$f$associateWith = 0;
        Intrinsics.checkNotNullParameter($this$associateWith, "$this$associateWith");
        Intrinsics.checkNotNullParameter(valueSelector, "valueSelector");
        LinkedHashMap result = new LinkedHashMap();
        Sequence<K> $this$associateWithTo$iv = $this$associateWith;
        boolean $i$f$associateWithTo = false;
        Iterator<K> iterator2 = $this$associateWithTo$iv.iterator();
        while (iterator2.hasNext()) {
            K element$iv = iterator2.next();
            ((Map)result).put(element$iv, valueSelector.invoke(element$iv));
        }
        return result;
    }

    @SinceKotlin(version="1.3")
    @NotNull
    public static final <K, V, M extends Map<? super K, ? super V>> M associateWithTo(@NotNull Sequence<? extends K> $this$associateWithTo, @NotNull M destination, @NotNull Function1<? super K, ? extends V> valueSelector) {
        int $i$f$associateWithTo = 0;
        Intrinsics.checkNotNullParameter($this$associateWithTo, "$this$associateWithTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(valueSelector, "valueSelector");
        Iterator<K> iterator2 = $this$associateWithTo.iterator();
        while (iterator2.hasNext()) {
            K element = iterator2.next();
            destination.put(element, valueSelector.invoke(element));
        }
        return destination;
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C toCollection(@NotNull Sequence<? extends T> $this$toCollection, @NotNull C destination) {
        Intrinsics.checkNotNullParameter($this$toCollection, "$this$toCollection");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Iterator<T> iterator2 = $this$toCollection.iterator();
        while (iterator2.hasNext()) {
            T item = iterator2.next();
            destination.add(item);
        }
        return destination;
    }

    @NotNull
    public static final <T> HashSet<T> toHashSet(@NotNull Sequence<? extends T> $this$toHashSet) {
        Intrinsics.checkNotNullParameter($this$toHashSet, "$this$toHashSet");
        return (HashSet)SequencesKt.toCollection($this$toHashSet, (Collection)new HashSet());
    }

    @NotNull
    public static final <T> List<T> toList(@NotNull Sequence<? extends T> $this$toList) {
        Intrinsics.checkNotNullParameter($this$toList, "$this$toList");
        return CollectionsKt.optimizeReadOnlyList(SequencesKt.toMutableList($this$toList));
    }

    @NotNull
    public static final <T> List<T> toMutableList(@NotNull Sequence<? extends T> $this$toMutableList) {
        Intrinsics.checkNotNullParameter($this$toMutableList, "$this$toMutableList");
        return (List)SequencesKt.toCollection($this$toMutableList, (Collection)new ArrayList());
    }

    @NotNull
    public static final <T> Set<T> toSet(@NotNull Sequence<? extends T> $this$toSet) {
        Intrinsics.checkNotNullParameter($this$toSet, "$this$toSet");
        return SetsKt.optimizeReadOnlySet((Set)SequencesKt.toCollection($this$toSet, (Collection)new LinkedHashSet()));
    }

    @SinceKotlin(version="1.4")
    @OverloadResolutionByLambdaReturnType
    @JvmName(name="flatMapIterable")
    @NotNull
    public static final <T, R> Sequence<R> flatMapIterable(@NotNull Sequence<? extends T> $this$flatMap, @NotNull Function1<? super T, ? extends Iterable<? extends R>> transform) {
        Intrinsics.checkNotNullParameter($this$flatMap, "$this$flatMap");
        Intrinsics.checkNotNullParameter(transform, "transform");
        return new FlatteningSequence($this$flatMap, transform, flatMap.1.INSTANCE);
    }

    @NotNull
    public static final <T, R> Sequence<R> flatMap(@NotNull Sequence<? extends T> $this$flatMap, @NotNull Function1<? super T, ? extends Sequence<? extends R>> transform) {
        Intrinsics.checkNotNullParameter($this$flatMap, "$this$flatMap");
        Intrinsics.checkNotNullParameter(transform, "transform");
        return new FlatteningSequence($this$flatMap, transform, flatMap.2.INSTANCE);
    }

    @SinceKotlin(version="1.4")
    @OverloadResolutionByLambdaReturnType
    @JvmName(name="flatMapIndexedIterable")
    @NotNull
    public static final <T, R> Sequence<R> flatMapIndexedIterable(@NotNull Sequence<? extends T> $this$flatMapIndexed, @NotNull Function2<? super Integer, ? super T, ? extends Iterable<? extends R>> transform) {
        Intrinsics.checkNotNullParameter($this$flatMapIndexed, "$this$flatMapIndexed");
        Intrinsics.checkNotNullParameter(transform, "transform");
        return SequencesKt.flatMapIndexed($this$flatMapIndexed, transform, flatMapIndexed.1.INSTANCE);
    }

    @SinceKotlin(version="1.4")
    @OverloadResolutionByLambdaReturnType
    @JvmName(name="flatMapIndexedSequence")
    @NotNull
    public static final <T, R> Sequence<R> flatMapIndexedSequence(@NotNull Sequence<? extends T> $this$flatMapIndexed, @NotNull Function2<? super Integer, ? super T, ? extends Sequence<? extends R>> transform) {
        Intrinsics.checkNotNullParameter($this$flatMapIndexed, "$this$flatMapIndexed");
        Intrinsics.checkNotNullParameter(transform, "transform");
        return SequencesKt.flatMapIndexed($this$flatMapIndexed, transform, flatMapIndexed.2.INSTANCE);
    }

    @SinceKotlin(version="1.4")
    @OverloadResolutionByLambdaReturnType
    @JvmName(name="flatMapIndexedIterableTo")
    @InlineOnly
    private static final <T, R, C extends Collection<? super R>> C flatMapIndexedIterableTo(Sequence<? extends T> $this$flatMapIndexedTo, C destination, Function2<? super Integer, ? super T, ? extends Iterable<? extends R>> transform) {
        int $i$f$flatMapIndexedIterableTo = 0;
        int index = 0;
        Iterator<T> iterator2 = $this$flatMapIndexedTo.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            int n = index++;
            boolean bl = false;
            if (n < 0) {
                if (PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    CollectionsKt.throwIndexOverflow();
                } else {
                    throw (Throwable)new ArithmeticException("Index overflow has happened.");
                }
            }
            Iterable<? extends R> list = transform.invoke(n, element);
            CollectionsKt.addAll(destination, list);
        }
        return destination;
    }

    @SinceKotlin(version="1.4")
    @OverloadResolutionByLambdaReturnType
    @JvmName(name="flatMapIndexedSequenceTo")
    @InlineOnly
    private static final <T, R, C extends Collection<? super R>> C flatMapIndexedSequenceTo(Sequence<? extends T> $this$flatMapIndexedTo, C destination, Function2<? super Integer, ? super T, ? extends Sequence<? extends R>> transform) {
        int $i$f$flatMapIndexedSequenceTo = 0;
        int index = 0;
        Iterator<T> iterator2 = $this$flatMapIndexedTo.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            int n = index++;
            boolean bl = false;
            if (n < 0) {
                if (PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    CollectionsKt.throwIndexOverflow();
                } else {
                    throw (Throwable)new ArithmeticException("Index overflow has happened.");
                }
            }
            Sequence<? extends R> list = transform.invoke(n, element);
            CollectionsKt.addAll(destination, list);
        }
        return destination;
    }

    @SinceKotlin(version="1.4")
    @OverloadResolutionByLambdaReturnType
    @JvmName(name="flatMapIterableTo")
    @NotNull
    public static final <T, R, C extends Collection<? super R>> C flatMapIterableTo(@NotNull Sequence<? extends T> $this$flatMapTo, @NotNull C destination, @NotNull Function1<? super T, ? extends Iterable<? extends R>> transform) {
        int $i$f$flatMapIterableTo = 0;
        Intrinsics.checkNotNullParameter($this$flatMapTo, "$this$flatMapTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(transform, "transform");
        Iterator<T> iterator2 = $this$flatMapTo.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            Iterable<? extends R> list = transform.invoke(element);
            CollectionsKt.addAll(destination, list);
        }
        return destination;
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C flatMapTo(@NotNull Sequence<? extends T> $this$flatMapTo, @NotNull C destination, @NotNull Function1<? super T, ? extends Sequence<? extends R>> transform) {
        int $i$f$flatMapTo = 0;
        Intrinsics.checkNotNullParameter($this$flatMapTo, "$this$flatMapTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(transform, "transform");
        Iterator<T> iterator2 = $this$flatMapTo.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            Sequence<? extends R> list = transform.invoke(element);
            CollectionsKt.addAll(destination, list);
        }
        return destination;
    }

    /*
     * WARNING - void declaration
     */
    @NotNull
    public static final <T, K> Map<K, List<T>> groupBy(@NotNull Sequence<? extends T> $this$groupBy, @NotNull Function1<? super T, ? extends K> keySelector) {
        void $this$groupByTo$iv;
        int $i$f$groupBy = 0;
        Intrinsics.checkNotNullParameter($this$groupBy, "$this$groupBy");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        Sequence<? extends T> sequence = $this$groupBy;
        Map destination$iv = new LinkedHashMap();
        boolean $i$f$groupByTo = false;
        for (Object element$iv : $this$groupByTo$iv) {
            Object object;
            K key$iv = keySelector.invoke(element$iv);
            Map $this$getOrPut$iv$iv = destination$iv;
            boolean $i$f$getOrPut = false;
            Object value$iv$iv = $this$getOrPut$iv$iv.get(key$iv);
            if (value$iv$iv == null) {
                boolean bl = false;
                List answer$iv$iv = new ArrayList();
                $this$getOrPut$iv$iv.put(key$iv, answer$iv$iv);
                object = answer$iv$iv;
            } else {
                object = value$iv$iv;
            }
            List list$iv = (List)object;
            list$iv.add(element$iv);
        }
        return destination$iv;
    }

    /*
     * WARNING - void declaration
     */
    @NotNull
    public static final <T, K, V> Map<K, List<V>> groupBy(@NotNull Sequence<? extends T> $this$groupBy, @NotNull Function1<? super T, ? extends K> keySelector, @NotNull Function1<? super T, ? extends V> valueTransform) {
        void $this$groupByTo$iv;
        int $i$f$groupBy = 0;
        Intrinsics.checkNotNullParameter($this$groupBy, "$this$groupBy");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        Intrinsics.checkNotNullParameter(valueTransform, "valueTransform");
        Sequence<? extends T> sequence = $this$groupBy;
        Map destination$iv = new LinkedHashMap();
        boolean $i$f$groupByTo = false;
        for (Object element$iv : $this$groupByTo$iv) {
            Object object;
            K key$iv = keySelector.invoke(element$iv);
            Map $this$getOrPut$iv$iv = destination$iv;
            boolean $i$f$getOrPut = false;
            Object value$iv$iv = $this$getOrPut$iv$iv.get(key$iv);
            if (value$iv$iv == null) {
                boolean bl = false;
                List answer$iv$iv = new ArrayList();
                $this$getOrPut$iv$iv.put(key$iv, answer$iv$iv);
                object = answer$iv$iv;
            } else {
                object = value$iv$iv;
            }
            List list$iv = (List)object;
            list$iv.add(valueTransform.invoke(element$iv));
        }
        return destination$iv;
    }

    @NotNull
    public static final <T, K, M extends Map<? super K, List<T>>> M groupByTo(@NotNull Sequence<? extends T> $this$groupByTo, @NotNull M destination, @NotNull Function1<? super T, ? extends K> keySelector) {
        int $i$f$groupByTo = 0;
        Intrinsics.checkNotNullParameter($this$groupByTo, "$this$groupByTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        Iterator<T> iterator2 = $this$groupByTo.iterator();
        while (iterator2.hasNext()) {
            List list;
            T element = iterator2.next();
            K key = keySelector.invoke(element);
            M $this$getOrPut$iv = destination;
            boolean $i$f$getOrPut = false;
            List value$iv = $this$getOrPut$iv.get(key);
            if (value$iv == null) {
                boolean bl = false;
                List answer$iv = new ArrayList();
                $this$getOrPut$iv.put(key, (List)answer$iv);
                list = answer$iv;
            } else {
                list = value$iv;
            }
            List list2 = list;
            list2.add(element);
        }
        return destination;
    }

    @NotNull
    public static final <T, K, V, M extends Map<? super K, List<V>>> M groupByTo(@NotNull Sequence<? extends T> $this$groupByTo, @NotNull M destination, @NotNull Function1<? super T, ? extends K> keySelector, @NotNull Function1<? super T, ? extends V> valueTransform) {
        int $i$f$groupByTo = 0;
        Intrinsics.checkNotNullParameter($this$groupByTo, "$this$groupByTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        Intrinsics.checkNotNullParameter(valueTransform, "valueTransform");
        Iterator<T> iterator2 = $this$groupByTo.iterator();
        while (iterator2.hasNext()) {
            List list;
            T element = iterator2.next();
            K key = keySelector.invoke(element);
            M $this$getOrPut$iv = destination;
            boolean $i$f$getOrPut = false;
            List value$iv = $this$getOrPut$iv.get(key);
            if (value$iv == null) {
                boolean bl = false;
                List answer$iv = new ArrayList();
                $this$getOrPut$iv.put(key, (List)answer$iv);
                list = answer$iv;
            } else {
                list = value$iv;
            }
            List list2 = list;
            list2.add(valueTransform.invoke(element));
        }
        return destination;
    }

    @SinceKotlin(version="1.1")
    @NotNull
    public static final <T, K> Grouping<T, K> groupingBy(@NotNull Sequence<? extends T> $this$groupingBy, @NotNull Function1<? super T, ? extends K> keySelector) {
        int $i$f$groupingBy = 0;
        Intrinsics.checkNotNullParameter($this$groupingBy, "$this$groupingBy");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        return new Grouping<T, K>($this$groupingBy, keySelector){
            final /* synthetic */ Sequence $this_groupingBy;
            final /* synthetic */ Function1 $keySelector;

            @NotNull
            public Iterator<T> sourceIterator() {
                return this.$this_groupingBy.iterator();
            }

            public K keyOf(T element) {
                return (K)this.$keySelector.invoke(element);
            }
            {
                this.$this_groupingBy = $receiver;
                this.$keySelector = $captured_local_variable$1;
            }
        };
    }

    @NotNull
    public static final <T, R> Sequence<R> map(@NotNull Sequence<? extends T> $this$map, @NotNull Function1<? super T, ? extends R> transform) {
        Intrinsics.checkNotNullParameter($this$map, "$this$map");
        Intrinsics.checkNotNullParameter(transform, "transform");
        return new TransformingSequence<T, R>($this$map, transform);
    }

    @NotNull
    public static final <T, R> Sequence<R> mapIndexed(@NotNull Sequence<? extends T> $this$mapIndexed, @NotNull Function2<? super Integer, ? super T, ? extends R> transform) {
        Intrinsics.checkNotNullParameter($this$mapIndexed, "$this$mapIndexed");
        Intrinsics.checkNotNullParameter(transform, "transform");
        return new TransformingIndexedSequence<T, R>($this$mapIndexed, transform);
    }

    @NotNull
    public static final <T, R> Sequence<R> mapIndexedNotNull(@NotNull Sequence<? extends T> $this$mapIndexedNotNull, @NotNull Function2<? super Integer, ? super T, ? extends R> transform) {
        Intrinsics.checkNotNullParameter($this$mapIndexedNotNull, "$this$mapIndexedNotNull");
        Intrinsics.checkNotNullParameter(transform, "transform");
        return SequencesKt.filterNotNull((Sequence)new TransformingIndexedSequence<T, R>($this$mapIndexedNotNull, transform));
    }

    /*
     * WARNING - void declaration
     */
    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapIndexedNotNullTo(@NotNull Sequence<? extends T> $this$mapIndexedNotNullTo, @NotNull C destination, @NotNull Function2<? super Integer, ? super T, ? extends R> transform) {
        int $i$f$mapIndexedNotNullTo = 0;
        Intrinsics.checkNotNullParameter($this$mapIndexedNotNullTo, "$this$mapIndexedNotNullTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(transform, "transform");
        Sequence<T> $this$forEachIndexed$iv = $this$mapIndexedNotNullTo;
        boolean $i$f$forEachIndexed = false;
        int index$iv = 0;
        Iterator<T> iterator2 = $this$forEachIndexed$iv.iterator();
        while (iterator2.hasNext()) {
            R r;
            void element;
            T item$iv = iterator2.next();
            int n = index$iv++;
            boolean bl = false;
            if (n < 0) {
                if (PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    CollectionsKt.throwIndexOverflow();
                } else {
                    throw (Throwable)new ArithmeticException("Index overflow has happened.");
                }
            }
            T t = item$iv;
            int index = n;
            boolean bl2 = false;
            if (transform.invoke(index, element) == null) continue;
            boolean bl3 = false;
            boolean bl4 = false;
            R it = r;
            boolean bl5 = false;
            destination.add(it);
        }
        return destination;
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapIndexedTo(@NotNull Sequence<? extends T> $this$mapIndexedTo, @NotNull C destination, @NotNull Function2<? super Integer, ? super T, ? extends R> transform) {
        int $i$f$mapIndexedTo = 0;
        Intrinsics.checkNotNullParameter($this$mapIndexedTo, "$this$mapIndexedTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(transform, "transform");
        int index = 0;
        Iterator<T> iterator2 = $this$mapIndexedTo.iterator();
        while (iterator2.hasNext()) {
            T item = iterator2.next();
            int n = index++;
            boolean bl = false;
            if (n < 0) {
                if (PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    CollectionsKt.throwIndexOverflow();
                } else {
                    throw (Throwable)new ArithmeticException("Index overflow has happened.");
                }
            }
            destination.add(transform.invoke(n, item));
        }
        return destination;
    }

    @NotNull
    public static final <T, R> Sequence<R> mapNotNull(@NotNull Sequence<? extends T> $this$mapNotNull, @NotNull Function1<? super T, ? extends R> transform) {
        Intrinsics.checkNotNullParameter($this$mapNotNull, "$this$mapNotNull");
        Intrinsics.checkNotNullParameter(transform, "transform");
        return SequencesKt.filterNotNull((Sequence)new TransformingSequence<T, R>($this$mapNotNull, transform));
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapNotNullTo(@NotNull Sequence<? extends T> $this$mapNotNullTo, @NotNull C destination, @NotNull Function1<? super T, ? extends R> transform) {
        int $i$f$mapNotNullTo = 0;
        Intrinsics.checkNotNullParameter($this$mapNotNullTo, "$this$mapNotNullTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(transform, "transform");
        Sequence<T> $this$forEach$iv = $this$mapNotNullTo;
        boolean $i$f$forEach = false;
        Iterator<T> iterator2 = $this$forEach$iv.iterator();
        while (iterator2.hasNext()) {
            R r;
            T element$iv;
            T element = element$iv = iterator2.next();
            boolean bl = false;
            if (transform.invoke(element) == null) continue;
            boolean bl2 = false;
            boolean bl3 = false;
            R it = r;
            boolean bl4 = false;
            destination.add(it);
        }
        return destination;
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapTo(@NotNull Sequence<? extends T> $this$mapTo, @NotNull C destination, @NotNull Function1<? super T, ? extends R> transform) {
        int $i$f$mapTo = 0;
        Intrinsics.checkNotNullParameter($this$mapTo, "$this$mapTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(transform, "transform");
        Iterator<T> iterator2 = $this$mapTo.iterator();
        while (iterator2.hasNext()) {
            T item = iterator2.next();
            destination.add(transform.invoke(item));
        }
        return destination;
    }

    @NotNull
    public static final <T> Sequence<IndexedValue<T>> withIndex(@NotNull Sequence<? extends T> $this$withIndex) {
        Intrinsics.checkNotNullParameter($this$withIndex, "$this$withIndex");
        return new IndexingSequence<T>($this$withIndex);
    }

    @NotNull
    public static final <T> Sequence<T> distinct(@NotNull Sequence<? extends T> $this$distinct) {
        Intrinsics.checkNotNullParameter($this$distinct, "$this$distinct");
        return SequencesKt.distinctBy($this$distinct, distinct.1.INSTANCE);
    }

    @NotNull
    public static final <T, K> Sequence<T> distinctBy(@NotNull Sequence<? extends T> $this$distinctBy, @NotNull Function1<? super T, ? extends K> selector) {
        Intrinsics.checkNotNullParameter($this$distinctBy, "$this$distinctBy");
        Intrinsics.checkNotNullParameter(selector, "selector");
        return new DistinctSequence<T, K>($this$distinctBy, selector);
    }

    @NotNull
    public static final <T> Set<T> toMutableSet(@NotNull Sequence<? extends T> $this$toMutableSet) {
        Intrinsics.checkNotNullParameter($this$toMutableSet, "$this$toMutableSet");
        LinkedHashSet<T> set = new LinkedHashSet<T>();
        Iterator<T> iterator2 = $this$toMutableSet.iterator();
        while (iterator2.hasNext()) {
            T item = iterator2.next();
            set.add(item);
        }
        return set;
    }

    public static final <T> boolean all(@NotNull Sequence<? extends T> $this$all, @NotNull Function1<? super T, Boolean> predicate) {
        int $i$f$all = 0;
        Intrinsics.checkNotNullParameter($this$all, "$this$all");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        Iterator<T> iterator2 = $this$all.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            if (predicate.invoke(element).booleanValue()) continue;
            return false;
        }
        return true;
    }

    public static final <T> boolean any(@NotNull Sequence<? extends T> $this$any) {
        Intrinsics.checkNotNullParameter($this$any, "$this$any");
        return $this$any.iterator().hasNext();
    }

    public static final <T> boolean any(@NotNull Sequence<? extends T> $this$any, @NotNull Function1<? super T, Boolean> predicate) {
        int $i$f$any = 0;
        Intrinsics.checkNotNullParameter($this$any, "$this$any");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        Iterator<T> iterator2 = $this$any.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            if (!predicate.invoke(element).booleanValue()) continue;
            return true;
        }
        return false;
    }

    public static final <T> int count(@NotNull Sequence<? extends T> $this$count) {
        Intrinsics.checkNotNullParameter($this$count, "$this$count");
        int count = 0;
        Iterator<T> iterator2 = $this$count.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            int n = ++count;
            boolean bl = false;
            if (n >= 0) continue;
            CollectionsKt.throwCountOverflow();
        }
        return count;
    }

    public static final <T> int count(@NotNull Sequence<? extends T> $this$count, @NotNull Function1<? super T, Boolean> predicate) {
        int $i$f$count = 0;
        Intrinsics.checkNotNullParameter($this$count, "$this$count");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        int count = 0;
        Iterator<T> iterator2 = $this$count.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            if (!predicate.invoke(element).booleanValue()) continue;
            int n = ++count;
            boolean bl = false;
            if (n >= 0) continue;
            if (PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                CollectionsKt.throwCountOverflow();
                continue;
            }
            throw (Throwable)new ArithmeticException("Count overflow has happened.");
        }
        return count;
    }

    public static final <T, R> R fold(@NotNull Sequence<? extends T> $this$fold, R initial, @NotNull Function2<? super R, ? super T, ? extends R> operation) {
        int $i$f$fold = 0;
        Intrinsics.checkNotNullParameter($this$fold, "$this$fold");
        Intrinsics.checkNotNullParameter(operation, "operation");
        R accumulator = initial;
        Iterator<T> iterator2 = $this$fold.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            accumulator = operation.invoke(accumulator, element);
        }
        return accumulator;
    }

    public static final <T, R> R foldIndexed(@NotNull Sequence<? extends T> $this$foldIndexed, R initial, @NotNull Function3<? super Integer, ? super R, ? super T, ? extends R> operation) {
        int $i$f$foldIndexed = 0;
        Intrinsics.checkNotNullParameter($this$foldIndexed, "$this$foldIndexed");
        Intrinsics.checkNotNullParameter(operation, "operation");
        int index = 0;
        R accumulator = initial;
        Iterator<T> iterator2 = $this$foldIndexed.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            int n = index++;
            boolean bl = false;
            if (n < 0) {
                if (PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    CollectionsKt.throwIndexOverflow();
                } else {
                    throw (Throwable)new ArithmeticException("Index overflow has happened.");
                }
            }
            accumulator = operation.invoke(n, accumulator, element);
        }
        return accumulator;
    }

    public static final <T> void forEach(@NotNull Sequence<? extends T> $this$forEach, @NotNull Function1<? super T, Unit> action) {
        int $i$f$forEach = 0;
        Intrinsics.checkNotNullParameter($this$forEach, "$this$forEach");
        Intrinsics.checkNotNullParameter(action, "action");
        Iterator<T> iterator2 = $this$forEach.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            action.invoke(element);
        }
    }

    public static final <T> void forEachIndexed(@NotNull Sequence<? extends T> $this$forEachIndexed, @NotNull Function2<? super Integer, ? super T, Unit> action) {
        int $i$f$forEachIndexed = 0;
        Intrinsics.checkNotNullParameter($this$forEachIndexed, "$this$forEachIndexed");
        Intrinsics.checkNotNullParameter(action, "action");
        int index = 0;
        Iterator<T> iterator2 = $this$forEachIndexed.iterator();
        while (iterator2.hasNext()) {
            T item = iterator2.next();
            int n = index++;
            boolean bl = false;
            if (n < 0) {
                if (PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    CollectionsKt.throwIndexOverflow();
                } else {
                    throw (Throwable)new ArithmeticException("Index overflow has happened.");
                }
            }
            action.invoke(n, item);
        }
    }

    @Deprecated(message="Use maxOrNull instead.", replaceWith=@ReplaceWith(imports={}, expression="maxOrNull()"))
    @DeprecatedSinceKotlin(warningSince="1.4")
    @SinceKotlin(version="1.1")
    @Nullable
    public static final Double max(@NotNull Sequence<Double> $this$max) {
        Intrinsics.checkNotNullParameter($this$max, "$this$max");
        return SequencesKt.maxOrNull($this$max);
    }

    @Deprecated(message="Use maxOrNull instead.", replaceWith=@ReplaceWith(imports={}, expression="maxOrNull()"))
    @DeprecatedSinceKotlin(warningSince="1.4")
    @SinceKotlin(version="1.1")
    @Nullable
    public static final Float max(@NotNull Sequence<Float> $this$max) {
        Intrinsics.checkNotNullParameter($this$max, "$this$max");
        return SequencesKt.maxOrNull($this$max);
    }

    @Deprecated(message="Use maxOrNull instead.", replaceWith=@ReplaceWith(imports={}, expression="maxOrNull()"))
    @DeprecatedSinceKotlin(warningSince="1.4")
    @Nullable
    public static final <T extends Comparable<? super T>> T max(@NotNull Sequence<? extends T> $this$max) {
        Intrinsics.checkNotNullParameter($this$max, "$this$max");
        return SequencesKt.maxOrNull($this$max);
    }

    @Deprecated(message="Use maxByOrNull instead.", replaceWith=@ReplaceWith(imports={}, expression="maxByOrNull(selector)"))
    @DeprecatedSinceKotlin(warningSince="1.4")
    @Nullable
    public static final <T, R extends Comparable<? super R>> T maxBy(@NotNull Sequence<? extends T> $this$maxBy, @NotNull Function1<? super T, ? extends R> selector) {
        T t;
        int $i$f$maxBy = 0;
        Intrinsics.checkNotNullParameter($this$maxBy, "$this$maxBy");
        Intrinsics.checkNotNullParameter(selector, "selector");
        Sequence<T> $this$maxByOrNull$iv = $this$maxBy;
        boolean $i$f$maxByOrNull = false;
        Iterator<T> iterator$iv = $this$maxByOrNull$iv.iterator();
        if (!iterator$iv.hasNext()) {
            t = null;
        } else {
            T maxElem$iv = iterator$iv.next();
            if (!iterator$iv.hasNext()) {
                t = maxElem$iv;
            } else {
                Comparable maxValue$iv = (Comparable)selector.invoke(maxElem$iv);
                do {
                    T e$iv;
                    Comparable v$iv;
                    if (maxValue$iv.compareTo(v$iv = (Comparable)selector.invoke(e$iv = iterator$iv.next())) >= 0) continue;
                    maxElem$iv = e$iv;
                    maxValue$iv = v$iv;
                } while (iterator$iv.hasNext());
                t = maxElem$iv;
            }
        }
        return t;
    }

    @SinceKotlin(version="1.4")
    @Nullable
    public static final <T, R extends Comparable<? super R>> T maxByOrNull(@NotNull Sequence<? extends T> $this$maxByOrNull, @NotNull Function1<? super T, ? extends R> selector) {
        int $i$f$maxByOrNull = 0;
        Intrinsics.checkNotNullParameter($this$maxByOrNull, "$this$maxByOrNull");
        Intrinsics.checkNotNullParameter(selector, "selector");
        Iterator<T> iterator2 = $this$maxByOrNull.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        T maxElem = iterator2.next();
        if (!iterator2.hasNext()) {
            return maxElem;
        }
        Comparable maxValue = (Comparable)selector.invoke(maxElem);
        do {
            T e;
            Comparable v;
            if (maxValue.compareTo(v = (Comparable)selector.invoke(e = iterator2.next())) >= 0) continue;
            maxElem = e;
            maxValue = v;
        } while (iterator2.hasNext());
        return maxElem;
    }

    @SinceKotlin(version="1.4")
    @OverloadResolutionByLambdaReturnType
    @InlineOnly
    private static final <T> double maxOf(Sequence<? extends T> $this$maxOf, Function1<? super T, Double> selector) {
        int $i$f$maxOf = 0;
        Iterator<T> iterator2 = $this$maxOf.iterator();
        if (!iterator2.hasNext()) {
            throw (Throwable)new NoSuchElementException();
        }
        double maxValue = ((Number)selector.invoke(iterator2.next())).doubleValue();
        while (iterator2.hasNext()) {
            double v = ((Number)selector.invoke(iterator2.next())).doubleValue();
            boolean bl = false;
            maxValue = Math.max(maxValue, v);
        }
        return maxValue;
    }

    @SinceKotlin(version="1.4")
    @OverloadResolutionByLambdaReturnType
    @InlineOnly
    private static final <T> float maxOf(Sequence<? extends T> $this$maxOf, Function1<? super T, Float> selector) {
        int $i$f$maxOf = 0;
        Iterator<T> iterator2 = $this$maxOf.iterator();
        if (!iterator2.hasNext()) {
            throw (Throwable)new NoSuchElementException();
        }
        float maxValue = ((Number)selector.invoke(iterator2.next())).floatValue();
        while (iterator2.hasNext()) {
            float v = ((Number)selector.invoke(iterator2.next())).floatValue();
            boolean bl = false;
            maxValue = Math.max(maxValue, v);
        }
        return maxValue;
    }

    @SinceKotlin(version="1.4")
    @OverloadResolutionByLambdaReturnType
    @InlineOnly
    private static final <T, R extends Comparable<? super R>> R maxOf(Sequence<? extends T> $this$maxOf, Function1<? super T, ? extends R> selector) {
        int $i$f$maxOf = 0;
        Iterator<T> iterator2 = $this$maxOf.iterator();
        if (!iterator2.hasNext()) {
            throw (Throwable)new NoSuchElementException();
        }
        Comparable maxValue = (Comparable)selector.invoke(iterator2.next());
        while (iterator2.hasNext()) {
            Comparable v = (Comparable)selector.invoke(iterator2.next());
            if (maxValue.compareTo(v) >= 0) continue;
            maxValue = v;
        }
        return (R)maxValue;
    }

    @SinceKotlin(version="1.4")
    @OverloadResolutionByLambdaReturnType
    @InlineOnly
    private static final <T> Double maxOfOrNull(Sequence<? extends T> $this$maxOfOrNull, Function1<? super T, Double> selector) {
        int $i$f$maxOfOrNull = 0;
        Iterator<T> iterator2 = $this$maxOfOrNull.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        double maxValue = ((Number)selector.invoke(iterator2.next())).doubleValue();
        while (iterator2.hasNext()) {
            double v = ((Number)selector.invoke(iterator2.next())).doubleValue();
            boolean bl = false;
            maxValue = Math.max(maxValue, v);
        }
        return maxValue;
    }

    @SinceKotlin(version="1.4")
    @OverloadResolutionByLambdaReturnType
    @InlineOnly
    private static final <T> Float maxOfOrNull(Sequence<? extends T> $this$maxOfOrNull, Function1<? super T, Float> selector) {
        int $i$f$maxOfOrNull = 0;
        Iterator<T> iterator2 = $this$maxOfOrNull.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        float maxValue = ((Number)selector.invoke(iterator2.next())).floatValue();
        while (iterator2.hasNext()) {
            float v = ((Number)selector.invoke(iterator2.next())).floatValue();
            boolean bl = false;
            maxValue = Math.max(maxValue, v);
        }
        return Float.valueOf(maxValue);
    }

    @SinceKotlin(version="1.4")
    @OverloadResolutionByLambdaReturnType
    @InlineOnly
    private static final <T, R extends Comparable<? super R>> R maxOfOrNull(Sequence<? extends T> $this$maxOfOrNull, Function1<? super T, ? extends R> selector) {
        int $i$f$maxOfOrNull = 0;
        Iterator<T> iterator2 = $this$maxOfOrNull.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        Comparable maxValue = (Comparable)selector.invoke(iterator2.next());
        while (iterator2.hasNext()) {
            Comparable v = (Comparable)selector.invoke(iterator2.next());
            if (maxValue.compareTo(v) >= 0) continue;
            maxValue = v;
        }
        return (R)maxValue;
    }

    @SinceKotlin(version="1.4")
    @OverloadResolutionByLambdaReturnType
    @InlineOnly
    private static final <T, R> R maxOfWith(Sequence<? extends T> $this$maxOfWith, Comparator<? super R> comparator, Function1<? super T, ? extends R> selector) {
        int $i$f$maxOfWith = 0;
        Iterator<T> iterator2 = $this$maxOfWith.iterator();
        if (!iterator2.hasNext()) {
            throw (Throwable)new NoSuchElementException();
        }
        R maxValue = selector.invoke(iterator2.next());
        while (iterator2.hasNext()) {
            R v = selector.invoke(iterator2.next());
            if (comparator.compare(maxValue, v) >= 0) continue;
            maxValue = v;
        }
        return maxValue;
    }

    @SinceKotlin(version="1.4")
    @OverloadResolutionByLambdaReturnType
    @InlineOnly
    private static final <T, R> R maxOfWithOrNull(Sequence<? extends T> $this$maxOfWithOrNull, Comparator<? super R> comparator, Function1<? super T, ? extends R> selector) {
        int $i$f$maxOfWithOrNull = 0;
        Iterator<T> iterator2 = $this$maxOfWithOrNull.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        R maxValue = selector.invoke(iterator2.next());
        while (iterator2.hasNext()) {
            R v = selector.invoke(iterator2.next());
            if (comparator.compare(maxValue, v) >= 0) continue;
            maxValue = v;
        }
        return maxValue;
    }

    @SinceKotlin(version="1.4")
    @Nullable
    public static final Double maxOrNull(@NotNull Sequence<Double> $this$maxOrNull) {
        Intrinsics.checkNotNullParameter($this$maxOrNull, "$this$maxOrNull");
        Iterator<Double> iterator2 = $this$maxOrNull.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        double max = ((Number)iterator2.next()).doubleValue();
        while (iterator2.hasNext()) {
            double e = ((Number)iterator2.next()).doubleValue();
            boolean bl = false;
            max = Math.max(max, e);
        }
        return max;
    }

    @SinceKotlin(version="1.4")
    @Nullable
    public static final Float maxOrNull(@NotNull Sequence<Float> $this$maxOrNull) {
        Intrinsics.checkNotNullParameter($this$maxOrNull, "$this$maxOrNull");
        Iterator<Float> iterator2 = $this$maxOrNull.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        float max = ((Number)iterator2.next()).floatValue();
        while (iterator2.hasNext()) {
            float e = ((Number)iterator2.next()).floatValue();
            boolean bl = false;
            max = Math.max(max, e);
        }
        return Float.valueOf(max);
    }

    @SinceKotlin(version="1.4")
    @Nullable
    public static final <T extends Comparable<? super T>> T maxOrNull(@NotNull Sequence<? extends T> $this$maxOrNull) {
        Intrinsics.checkNotNullParameter($this$maxOrNull, "$this$maxOrNull");
        Iterator<T> iterator2 = $this$maxOrNull.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        Comparable max = (Comparable)iterator2.next();
        while (iterator2.hasNext()) {
            Comparable e = (Comparable)iterator2.next();
            if (max.compareTo(e) >= 0) continue;
            max = e;
        }
        return (T)max;
    }

    @Deprecated(message="Use maxWithOrNull instead.", replaceWith=@ReplaceWith(imports={}, expression="maxWithOrNull(comparator)"))
    @DeprecatedSinceKotlin(warningSince="1.4")
    @Nullable
    public static final <T> T maxWith(@NotNull Sequence<? extends T> $this$maxWith, @NotNull Comparator<? super T> comparator) {
        Intrinsics.checkNotNullParameter($this$maxWith, "$this$maxWith");
        Intrinsics.checkNotNullParameter(comparator, "comparator");
        return SequencesKt.maxWithOrNull($this$maxWith, comparator);
    }

    @SinceKotlin(version="1.4")
    @Nullable
    public static final <T> T maxWithOrNull(@NotNull Sequence<? extends T> $this$maxWithOrNull, @NotNull Comparator<? super T> comparator) {
        Intrinsics.checkNotNullParameter($this$maxWithOrNull, "$this$maxWithOrNull");
        Intrinsics.checkNotNullParameter(comparator, "comparator");
        Iterator<T> iterator2 = $this$maxWithOrNull.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        T max = iterator2.next();
        while (iterator2.hasNext()) {
            T e = iterator2.next();
            if (comparator.compare(max, e) >= 0) continue;
            max = e;
        }
        return max;
    }

    @Deprecated(message="Use minOrNull instead.", replaceWith=@ReplaceWith(imports={}, expression="minOrNull()"))
    @DeprecatedSinceKotlin(warningSince="1.4")
    @SinceKotlin(version="1.1")
    @Nullable
    public static final Double min(@NotNull Sequence<Double> $this$min) {
        Intrinsics.checkNotNullParameter($this$min, "$this$min");
        return SequencesKt.minOrNull($this$min);
    }

    @Deprecated(message="Use minOrNull instead.", replaceWith=@ReplaceWith(imports={}, expression="minOrNull()"))
    @DeprecatedSinceKotlin(warningSince="1.4")
    @SinceKotlin(version="1.1")
    @Nullable
    public static final Float min(@NotNull Sequence<Float> $this$min) {
        Intrinsics.checkNotNullParameter($this$min, "$this$min");
        return SequencesKt.minOrNull($this$min);
    }

    @Deprecated(message="Use minOrNull instead.", replaceWith=@ReplaceWith(imports={}, expression="minOrNull()"))
    @DeprecatedSinceKotlin(warningSince="1.4")
    @Nullable
    public static final <T extends Comparable<? super T>> T min(@NotNull Sequence<? extends T> $this$min) {
        Intrinsics.checkNotNullParameter($this$min, "$this$min");
        return SequencesKt.minOrNull($this$min);
    }

    @Deprecated(message="Use minByOrNull instead.", replaceWith=@ReplaceWith(imports={}, expression="minByOrNull(selector)"))
    @DeprecatedSinceKotlin(warningSince="1.4")
    @Nullable
    public static final <T, R extends Comparable<? super R>> T minBy(@NotNull Sequence<? extends T> $this$minBy, @NotNull Function1<? super T, ? extends R> selector) {
        T t;
        int $i$f$minBy = 0;
        Intrinsics.checkNotNullParameter($this$minBy, "$this$minBy");
        Intrinsics.checkNotNullParameter(selector, "selector");
        Sequence<T> $this$minByOrNull$iv = $this$minBy;
        boolean $i$f$minByOrNull = false;
        Iterator<T> iterator$iv = $this$minByOrNull$iv.iterator();
        if (!iterator$iv.hasNext()) {
            t = null;
        } else {
            T minElem$iv = iterator$iv.next();
            if (!iterator$iv.hasNext()) {
                t = minElem$iv;
            } else {
                Comparable minValue$iv = (Comparable)selector.invoke(minElem$iv);
                do {
                    T e$iv;
                    Comparable v$iv;
                    if (minValue$iv.compareTo(v$iv = (Comparable)selector.invoke(e$iv = iterator$iv.next())) <= 0) continue;
                    minElem$iv = e$iv;
                    minValue$iv = v$iv;
                } while (iterator$iv.hasNext());
                t = minElem$iv;
            }
        }
        return t;
    }

    @SinceKotlin(version="1.4")
    @Nullable
    public static final <T, R extends Comparable<? super R>> T minByOrNull(@NotNull Sequence<? extends T> $this$minByOrNull, @NotNull Function1<? super T, ? extends R> selector) {
        int $i$f$minByOrNull = 0;
        Intrinsics.checkNotNullParameter($this$minByOrNull, "$this$minByOrNull");
        Intrinsics.checkNotNullParameter(selector, "selector");
        Iterator<T> iterator2 = $this$minByOrNull.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        T minElem = iterator2.next();
        if (!iterator2.hasNext()) {
            return minElem;
        }
        Comparable minValue = (Comparable)selector.invoke(minElem);
        do {
            T e;
            Comparable v;
            if (minValue.compareTo(v = (Comparable)selector.invoke(e = iterator2.next())) <= 0) continue;
            minElem = e;
            minValue = v;
        } while (iterator2.hasNext());
        return minElem;
    }

    @SinceKotlin(version="1.4")
    @OverloadResolutionByLambdaReturnType
    @InlineOnly
    private static final <T> double minOf(Sequence<? extends T> $this$minOf, Function1<? super T, Double> selector) {
        int $i$f$minOf = 0;
        Iterator<T> iterator2 = $this$minOf.iterator();
        if (!iterator2.hasNext()) {
            throw (Throwable)new NoSuchElementException();
        }
        double minValue = ((Number)selector.invoke(iterator2.next())).doubleValue();
        while (iterator2.hasNext()) {
            double v = ((Number)selector.invoke(iterator2.next())).doubleValue();
            boolean bl = false;
            minValue = Math.min(minValue, v);
        }
        return minValue;
    }

    @SinceKotlin(version="1.4")
    @OverloadResolutionByLambdaReturnType
    @InlineOnly
    private static final <T> float minOf(Sequence<? extends T> $this$minOf, Function1<? super T, Float> selector) {
        int $i$f$minOf = 0;
        Iterator<T> iterator2 = $this$minOf.iterator();
        if (!iterator2.hasNext()) {
            throw (Throwable)new NoSuchElementException();
        }
        float minValue = ((Number)selector.invoke(iterator2.next())).floatValue();
        while (iterator2.hasNext()) {
            float v = ((Number)selector.invoke(iterator2.next())).floatValue();
            boolean bl = false;
            minValue = Math.min(minValue, v);
        }
        return minValue;
    }

    @SinceKotlin(version="1.4")
    @OverloadResolutionByLambdaReturnType
    @InlineOnly
    private static final <T, R extends Comparable<? super R>> R minOf(Sequence<? extends T> $this$minOf, Function1<? super T, ? extends R> selector) {
        int $i$f$minOf = 0;
        Iterator<T> iterator2 = $this$minOf.iterator();
        if (!iterator2.hasNext()) {
            throw (Throwable)new NoSuchElementException();
        }
        Comparable minValue = (Comparable)selector.invoke(iterator2.next());
        while (iterator2.hasNext()) {
            Comparable v = (Comparable)selector.invoke(iterator2.next());
            if (minValue.compareTo(v) <= 0) continue;
            minValue = v;
        }
        return (R)minValue;
    }

    @SinceKotlin(version="1.4")
    @OverloadResolutionByLambdaReturnType
    @InlineOnly
    private static final <T> Double minOfOrNull(Sequence<? extends T> $this$minOfOrNull, Function1<? super T, Double> selector) {
        int $i$f$minOfOrNull = 0;
        Iterator<T> iterator2 = $this$minOfOrNull.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        double minValue = ((Number)selector.invoke(iterator2.next())).doubleValue();
        while (iterator2.hasNext()) {
            double v = ((Number)selector.invoke(iterator2.next())).doubleValue();
            boolean bl = false;
            minValue = Math.min(minValue, v);
        }
        return minValue;
    }

    @SinceKotlin(version="1.4")
    @OverloadResolutionByLambdaReturnType
    @InlineOnly
    private static final <T> Float minOfOrNull(Sequence<? extends T> $this$minOfOrNull, Function1<? super T, Float> selector) {
        int $i$f$minOfOrNull = 0;
        Iterator<T> iterator2 = $this$minOfOrNull.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        float minValue = ((Number)selector.invoke(iterator2.next())).floatValue();
        while (iterator2.hasNext()) {
            float v = ((Number)selector.invoke(iterator2.next())).floatValue();
            boolean bl = false;
            minValue = Math.min(minValue, v);
        }
        return Float.valueOf(minValue);
    }

    @SinceKotlin(version="1.4")
    @OverloadResolutionByLambdaReturnType
    @InlineOnly
    private static final <T, R extends Comparable<? super R>> R minOfOrNull(Sequence<? extends T> $this$minOfOrNull, Function1<? super T, ? extends R> selector) {
        int $i$f$minOfOrNull = 0;
        Iterator<T> iterator2 = $this$minOfOrNull.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        Comparable minValue = (Comparable)selector.invoke(iterator2.next());
        while (iterator2.hasNext()) {
            Comparable v = (Comparable)selector.invoke(iterator2.next());
            if (minValue.compareTo(v) <= 0) continue;
            minValue = v;
        }
        return (R)minValue;
    }

    @SinceKotlin(version="1.4")
    @OverloadResolutionByLambdaReturnType
    @InlineOnly
    private static final <T, R> R minOfWith(Sequence<? extends T> $this$minOfWith, Comparator<? super R> comparator, Function1<? super T, ? extends R> selector) {
        int $i$f$minOfWith = 0;
        Iterator<T> iterator2 = $this$minOfWith.iterator();
        if (!iterator2.hasNext()) {
            throw (Throwable)new NoSuchElementException();
        }
        R minValue = selector.invoke(iterator2.next());
        while (iterator2.hasNext()) {
            R v = selector.invoke(iterator2.next());
            if (comparator.compare(minValue, v) <= 0) continue;
            minValue = v;
        }
        return minValue;
    }

    @SinceKotlin(version="1.4")
    @OverloadResolutionByLambdaReturnType
    @InlineOnly
    private static final <T, R> R minOfWithOrNull(Sequence<? extends T> $this$minOfWithOrNull, Comparator<? super R> comparator, Function1<? super T, ? extends R> selector) {
        int $i$f$minOfWithOrNull = 0;
        Iterator<T> iterator2 = $this$minOfWithOrNull.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        R minValue = selector.invoke(iterator2.next());
        while (iterator2.hasNext()) {
            R v = selector.invoke(iterator2.next());
            if (comparator.compare(minValue, v) <= 0) continue;
            minValue = v;
        }
        return minValue;
    }

    @SinceKotlin(version="1.4")
    @Nullable
    public static final Double minOrNull(@NotNull Sequence<Double> $this$minOrNull) {
        Intrinsics.checkNotNullParameter($this$minOrNull, "$this$minOrNull");
        Iterator<Double> iterator2 = $this$minOrNull.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        double min = ((Number)iterator2.next()).doubleValue();
        while (iterator2.hasNext()) {
            double e = ((Number)iterator2.next()).doubleValue();
            boolean bl = false;
            min = Math.min(min, e);
        }
        return min;
    }

    @SinceKotlin(version="1.4")
    @Nullable
    public static final Float minOrNull(@NotNull Sequence<Float> $this$minOrNull) {
        Intrinsics.checkNotNullParameter($this$minOrNull, "$this$minOrNull");
        Iterator<Float> iterator2 = $this$minOrNull.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        float min = ((Number)iterator2.next()).floatValue();
        while (iterator2.hasNext()) {
            float e = ((Number)iterator2.next()).floatValue();
            boolean bl = false;
            min = Math.min(min, e);
        }
        return Float.valueOf(min);
    }

    @SinceKotlin(version="1.4")
    @Nullable
    public static final <T extends Comparable<? super T>> T minOrNull(@NotNull Sequence<? extends T> $this$minOrNull) {
        Intrinsics.checkNotNullParameter($this$minOrNull, "$this$minOrNull");
        Iterator<T> iterator2 = $this$minOrNull.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        Comparable min = (Comparable)iterator2.next();
        while (iterator2.hasNext()) {
            Comparable e = (Comparable)iterator2.next();
            if (min.compareTo(e) <= 0) continue;
            min = e;
        }
        return (T)min;
    }

    @Deprecated(message="Use minWithOrNull instead.", replaceWith=@ReplaceWith(imports={}, expression="minWithOrNull(comparator)"))
    @DeprecatedSinceKotlin(warningSince="1.4")
    @Nullable
    public static final <T> T minWith(@NotNull Sequence<? extends T> $this$minWith, @NotNull Comparator<? super T> comparator) {
        Intrinsics.checkNotNullParameter($this$minWith, "$this$minWith");
        Intrinsics.checkNotNullParameter(comparator, "comparator");
        return SequencesKt.minWithOrNull($this$minWith, comparator);
    }

    @SinceKotlin(version="1.4")
    @Nullable
    public static final <T> T minWithOrNull(@NotNull Sequence<? extends T> $this$minWithOrNull, @NotNull Comparator<? super T> comparator) {
        Intrinsics.checkNotNullParameter($this$minWithOrNull, "$this$minWithOrNull");
        Intrinsics.checkNotNullParameter(comparator, "comparator");
        Iterator<T> iterator2 = $this$minWithOrNull.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        T min = iterator2.next();
        while (iterator2.hasNext()) {
            T e = iterator2.next();
            if (comparator.compare(min, e) <= 0) continue;
            min = e;
        }
        return min;
    }

    public static final <T> boolean none(@NotNull Sequence<? extends T> $this$none) {
        Intrinsics.checkNotNullParameter($this$none, "$this$none");
        return !$this$none.iterator().hasNext();
    }

    public static final <T> boolean none(@NotNull Sequence<? extends T> $this$none, @NotNull Function1<? super T, Boolean> predicate) {
        int $i$f$none = 0;
        Intrinsics.checkNotNullParameter($this$none, "$this$none");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        Iterator<T> iterator2 = $this$none.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            if (!predicate.invoke(element).booleanValue()) continue;
            return false;
        }
        return true;
    }

    @SinceKotlin(version="1.1")
    @NotNull
    public static final <T> Sequence<T> onEach(@NotNull Sequence<? extends T> $this$onEach, @NotNull Function1<? super T, Unit> action) {
        Intrinsics.checkNotNullParameter($this$onEach, "$this$onEach");
        Intrinsics.checkNotNullParameter(action, "action");
        return SequencesKt.map($this$onEach, new Function1<T, T>(action){
            final /* synthetic */ Function1 $action;

            public final T invoke(T it) {
                this.$action.invoke(it);
                return it;
            }
            {
                this.$action = function1;
                super(1);
            }
        });
    }

    @SinceKotlin(version="1.4")
    @NotNull
    public static final <T> Sequence<T> onEachIndexed(@NotNull Sequence<? extends T> $this$onEachIndexed, @NotNull Function2<? super Integer, ? super T, Unit> action) {
        Intrinsics.checkNotNullParameter($this$onEachIndexed, "$this$onEachIndexed");
        Intrinsics.checkNotNullParameter(action, "action");
        return SequencesKt.mapIndexed($this$onEachIndexed, new Function2<Integer, T, T>(action){
            final /* synthetic */ Function2 $action;

            public final T invoke(int index, T element) {
                this.$action.invoke(index, element);
                return element;
            }
            {
                this.$action = function2;
                super(2);
            }
        });
    }

    public static final <S, T extends S> S reduce(@NotNull Sequence<? extends T> $this$reduce, @NotNull Function2<? super S, ? super T, ? extends S> operation) {
        int $i$f$reduce = 0;
        Intrinsics.checkNotNullParameter($this$reduce, "$this$reduce");
        Intrinsics.checkNotNullParameter(operation, "operation");
        Iterator<T> iterator2 = $this$reduce.iterator();
        if (!iterator2.hasNext()) {
            throw (Throwable)new UnsupportedOperationException("Empty sequence can't be reduced.");
        }
        Object accumulator = iterator2.next();
        while (iterator2.hasNext()) {
            accumulator = operation.invoke(accumulator, iterator2.next());
        }
        return (S)accumulator;
    }

    public static final <S, T extends S> S reduceIndexed(@NotNull Sequence<? extends T> $this$reduceIndexed, @NotNull Function3<? super Integer, ? super S, ? super T, ? extends S> operation) {
        int $i$f$reduceIndexed = 0;
        Intrinsics.checkNotNullParameter($this$reduceIndexed, "$this$reduceIndexed");
        Intrinsics.checkNotNullParameter(operation, "operation");
        Iterator<T> iterator2 = $this$reduceIndexed.iterator();
        if (!iterator2.hasNext()) {
            throw (Throwable)new UnsupportedOperationException("Empty sequence can't be reduced.");
        }
        int index = 1;
        Object accumulator = iterator2.next();
        while (iterator2.hasNext()) {
            int n = index++;
            boolean bl = false;
            if (n < 0) {
                if (PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    CollectionsKt.throwIndexOverflow();
                } else {
                    throw (Throwable)new ArithmeticException("Index overflow has happened.");
                }
            }
            accumulator = operation.invoke(n, accumulator, iterator2.next());
        }
        return (S)accumulator;
    }

    @SinceKotlin(version="1.4")
    @Nullable
    public static final <S, T extends S> S reduceIndexedOrNull(@NotNull Sequence<? extends T> $this$reduceIndexedOrNull, @NotNull Function3<? super Integer, ? super S, ? super T, ? extends S> operation) {
        int $i$f$reduceIndexedOrNull = 0;
        Intrinsics.checkNotNullParameter($this$reduceIndexedOrNull, "$this$reduceIndexedOrNull");
        Intrinsics.checkNotNullParameter(operation, "operation");
        Iterator<T> iterator2 = $this$reduceIndexedOrNull.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        int index = 1;
        Object accumulator = iterator2.next();
        while (iterator2.hasNext()) {
            int n = index++;
            boolean bl = false;
            if (n < 0) {
                if (PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    CollectionsKt.throwIndexOverflow();
                } else {
                    throw (Throwable)new ArithmeticException("Index overflow has happened.");
                }
            }
            accumulator = operation.invoke(n, accumulator, iterator2.next());
        }
        return (S)accumulator;
    }

    @SinceKotlin(version="1.4")
    @WasExperimental(markerClass={ExperimentalStdlibApi.class})
    @Nullable
    public static final <S, T extends S> S reduceOrNull(@NotNull Sequence<? extends T> $this$reduceOrNull, @NotNull Function2<? super S, ? super T, ? extends S> operation) {
        int $i$f$reduceOrNull = 0;
        Intrinsics.checkNotNullParameter($this$reduceOrNull, "$this$reduceOrNull");
        Intrinsics.checkNotNullParameter(operation, "operation");
        Iterator<T> iterator2 = $this$reduceOrNull.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        Object accumulator = iterator2.next();
        while (iterator2.hasNext()) {
            accumulator = operation.invoke(accumulator, iterator2.next());
        }
        return (S)accumulator;
    }

    @SinceKotlin(version="1.4")
    @NotNull
    public static final <T, R> Sequence<R> runningFold(@NotNull Sequence<? extends T> $this$runningFold, R initial, @NotNull Function2<? super R, ? super T, ? extends R> operation) {
        Intrinsics.checkNotNullParameter($this$runningFold, "$this$runningFold");
        Intrinsics.checkNotNullParameter(operation, "operation");
        return SequencesKt.sequence(new Function2<SequenceScope<? super R>, Continuation<? super Unit>, Object>($this$runningFold, initial, operation, null){
            private SequenceScope p$;
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            int label;
            final /* synthetic */ Sequence $this_runningFold;
            final /* synthetic */ Object $initial;
            final /* synthetic */ Function2 $operation;

            /*
             * Unable to fully structure code
             * Enabled aggressive block sorting
             * Lifted jumps to return sites
             */
            @Nullable
            public final Object invokeSuspend(@NotNull Object $result) {
                var6_2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                switch (this.label) {
                    case 0: {
                        ResultKt.throwOnFailure($result);
                        $this$sequence = this.p$;
                        this.L$0 = $this$sequence;
                        this.label = 1;
                        v0 = $this$sequence.yield(this.$initial, this);
                        if (v0 == var6_2) {
                            return var6_2;
                        }
                        ** GOTO lbl16
                    }
                    case 1: {
                        $this$sequence = (SequenceScope)this.L$0;
                        ResultKt.throwOnFailure($result);
                        v0 = $result;
lbl16:
                        // 2 sources

                        accumulator = this.$initial;
                        var5_5 = this.$this_runningFold.iterator();
                        ** GOTO lbl26
                    }
                    case 2: {
                        var5_5 = (Iterator<T>)this.L$3;
                        element = this.L$2;
                        accumulator = this.L$1;
                        $this$sequence = (SequenceScope)this.L$0;
                        ResultKt.throwOnFailure($result);
                        v1 = $result;
lbl26:
                        // 2 sources

                        do {
                            if (var5_5.hasNext() == false) return Unit.INSTANCE;
                            element = var5_5.next();
                            accumulator = this.$operation.invoke(accumulator, element);
                            this.L$0 = $this$sequence;
                            this.L$1 = accumulator;
                            this.L$2 = element;
                            this.L$3 = var5_5;
                            this.label = 2;
                        } while ((v1 = $this$sequence.yield(accumulator, this)) != var6_2);
                        return var6_2;
                    }
                }
                throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
            }
            {
                this.$this_runningFold = sequence;
                this.$initial = object;
                this.$operation = function2;
                super(2, continuation);
            }

            @NotNull
            public final Continuation<Unit> create(@Nullable Object value, @NotNull Continuation<?> completion) {
                Intrinsics.checkNotNullParameter(completion, "completion");
                Function2<SequenceScope<? super R>, Continuation<? super Unit>, Object> function2 = new /* invalid duplicate definition of identical inner class */;
                SequenceScope sequenceScope = function2.p$ = (SequenceScope)value;
                return function2;
            }

            public final Object invoke(Object object, Object object2) {
                return (this.create(object, (Continuation)object2)).invokeSuspend(Unit.INSTANCE);
            }
        });
    }

    @SinceKotlin(version="1.4")
    @NotNull
    public static final <T, R> Sequence<R> runningFoldIndexed(@NotNull Sequence<? extends T> $this$runningFoldIndexed, R initial, @NotNull Function3<? super Integer, ? super R, ? super T, ? extends R> operation) {
        Intrinsics.checkNotNullParameter($this$runningFoldIndexed, "$this$runningFoldIndexed");
        Intrinsics.checkNotNullParameter(operation, "operation");
        return SequencesKt.sequence(new Function2<SequenceScope<? super R>, Continuation<? super Unit>, Object>($this$runningFoldIndexed, initial, operation, null){
            private SequenceScope p$;
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            int I$0;
            int label;
            final /* synthetic */ Sequence $this_runningFoldIndexed;
            final /* synthetic */ Object $initial;
            final /* synthetic */ Function3 $operation;

            /*
             * Unable to fully structure code
             * Enabled aggressive block sorting
             * Lifted jumps to return sites
             */
            @Nullable
            public final Object invokeSuspend(@NotNull Object $result) {
                var9_2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                switch (this.label) {
                    case 0: {
                        ResultKt.throwOnFailure($result);
                        $this$sequence = this.p$;
                        this.L$0 = $this$sequence;
                        this.label = 1;
                        v0 = $this$sequence.yield(this.$initial, this);
                        if (v0 == var9_2) {
                            return var9_2;
                        }
                        ** GOTO lbl16
                    }
                    case 1: {
                        $this$sequence = (SequenceScope)this.L$0;
                        ResultKt.throwOnFailure($result);
                        v0 = $result;
lbl16:
                        // 2 sources

                        index = 0;
                        accumulator = this.$initial;
                        var6_6 = this.$this_runningFoldIndexed.iterator();
                        ** GOTO lbl28
                    }
                    case 2: {
                        var6_6 = (Iterator<T>)this.L$3;
                        element = this.L$2;
                        accumulator = this.L$1;
                        index = this.I$0;
                        $this$sequence = (SequenceScope)this.L$0;
                        ResultKt.throwOnFailure($result);
                        v1 = $result;
lbl28:
                        // 2 sources

                        do {
                            if (var6_6.hasNext() == false) return Unit.INSTANCE;
                            element = var6_6.next();
                            var7_8 = index++;
                            var8_9 = false;
                            if (var7_8 < 0) {
                                CollectionsKt.throwIndexOverflow();
                            }
                            accumulator = this.$operation.invoke(Boxing.boxInt(var7_8), accumulator, element);
                            this.L$0 = $this$sequence;
                            this.I$0 = index;
                            this.L$1 = accumulator;
                            this.L$2 = element;
                            this.L$3 = var6_6;
                            this.label = 2;
                        } while ((v1 = $this$sequence.yield(accumulator, this)) != var9_2);
                        return var9_2;
                    }
                }
                throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
            }
            {
                this.$this_runningFoldIndexed = sequence;
                this.$initial = object;
                this.$operation = function3;
                super(2, continuation);
            }

            @NotNull
            public final Continuation<Unit> create(@Nullable Object value, @NotNull Continuation<?> completion) {
                Intrinsics.checkNotNullParameter(completion, "completion");
                Function2<SequenceScope<? super R>, Continuation<? super Unit>, Object> function2 = new /* invalid duplicate definition of identical inner class */;
                SequenceScope sequenceScope = function2.p$ = (SequenceScope)value;
                return function2;
            }

            public final Object invoke(Object object, Object object2) {
                return (this.create(object, (Continuation)object2)).invokeSuspend(Unit.INSTANCE);
            }
        });
    }

    @SinceKotlin(version="1.4")
    @WasExperimental(markerClass={ExperimentalStdlibApi.class})
    @NotNull
    public static final <S, T extends S> Sequence<S> runningReduce(@NotNull Sequence<? extends T> $this$runningReduce, @NotNull Function2<? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkNotNullParameter($this$runningReduce, "$this$runningReduce");
        Intrinsics.checkNotNullParameter(operation, "operation");
        return SequencesKt.sequence(new Function2<SequenceScope<? super S>, Continuation<? super Unit>, Object>($this$runningReduce, operation, null){
            private SequenceScope p$;
            Object L$0;
            Object L$1;
            Object L$2;
            int label;
            final /* synthetic */ Sequence $this_runningReduce;
            final /* synthetic */ Function2 $operation;

            /*
             * Unable to fully structure code
             * Enabled aggressive block sorting
             * Lifted jumps to return sites
             */
            @Nullable
            public final Object invokeSuspend(@NotNull Object $result) {
                var5_2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                switch (this.label) {
                    case 0: {
                        ResultKt.throwOnFailure($result);
                        $this$sequence = this.p$;
                        iterator = this.$this_runningReduce.iterator();
                        if (iterator.hasNext() == false) return Unit.INSTANCE;
                        accumulator = iterator.next();
                        this.L$0 = $this$sequence;
                        this.L$1 = iterator;
                        this.L$2 = accumulator;
                        this.label = 1;
                        v0 = $this$sequence.yield(accumulator, this);
                        if (v0 == var5_2) {
                            return var5_2;
                        }
                        ** GOTO lbl30
                    }
                    case 1: {
                        accumulator = this.L$2;
                        iterator = (Iterator<T>)this.L$1;
                        $this$sequence = (SequenceScope)this.L$0;
                        ResultKt.throwOnFailure($result);
                        v0 = $result;
                        ** GOTO lbl30
                    }
                    case 2: {
                        accumulator = this.L$2;
                        iterator = (Iterator)this.L$1;
                        $this$sequence = (SequenceScope)this.L$0;
                        ResultKt.throwOnFailure($result);
                        v1 = $result;
lbl30:
                        // 3 sources

                        do {
                            if (iterator.hasNext() == false) return Unit.INSTANCE;
                            accumulator = this.$operation.invoke(accumulator, iterator.next());
                            this.L$0 = $this$sequence;
                            this.L$1 = iterator;
                            this.L$2 = accumulator;
                            this.label = 2;
                        } while ((v1 = $this$sequence.yield(accumulator, this)) != var5_2);
                        return var5_2;
                    }
                }
                throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
            }
            {
                this.$this_runningReduce = sequence;
                this.$operation = function2;
                super(2, continuation);
            }

            @NotNull
            public final Continuation<Unit> create(@Nullable Object value, @NotNull Continuation<?> completion) {
                Intrinsics.checkNotNullParameter(completion, "completion");
                Function2<SequenceScope<? super S>, Continuation<? super Unit>, Object> function2 = new /* invalid duplicate definition of identical inner class */;
                SequenceScope sequenceScope = function2.p$ = (SequenceScope)value;
                return function2;
            }

            public final Object invoke(Object object, Object object2) {
                return (this.create(object, (Continuation)object2)).invokeSuspend(Unit.INSTANCE);
            }
        });
    }

    @SinceKotlin(version="1.4")
    @NotNull
    public static final <S, T extends S> Sequence<S> runningReduceIndexed(@NotNull Sequence<? extends T> $this$runningReduceIndexed, @NotNull Function3<? super Integer, ? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkNotNullParameter($this$runningReduceIndexed, "$this$runningReduceIndexed");
        Intrinsics.checkNotNullParameter(operation, "operation");
        return SequencesKt.sequence(new Function2<SequenceScope<? super S>, Continuation<? super Unit>, Object>($this$runningReduceIndexed, operation, null){
            private SequenceScope p$;
            Object L$0;
            Object L$1;
            Object L$2;
            int I$0;
            int label;
            final /* synthetic */ Sequence $this_runningReduceIndexed;
            final /* synthetic */ Function3 $operation;

            /*
             * Unable to fully structure code
             * Enabled aggressive block sorting
             * Lifted jumps to return sites
             */
            @Nullable
            public final Object invokeSuspend(@NotNull Object $result) {
                var8_2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                switch (this.label) {
                    case 0: {
                        ResultKt.throwOnFailure($result);
                        $this$sequence = this.p$;
                        iterator = this.$this_runningReduceIndexed.iterator();
                        if (iterator.hasNext() == false) return Unit.INSTANCE;
                        accumulator = iterator.next();
                        this.L$0 = $this$sequence;
                        this.L$1 = iterator;
                        this.L$2 = accumulator;
                        this.label = 1;
                        v0 = $this$sequence.yield(accumulator, this);
                        if (v0 == var8_2) {
                            return var8_2;
                        }
                        ** GOTO lbl23
                    }
                    case 1: {
                        accumulator = this.L$2;
                        iterator = (Iterator)this.L$1;
                        $this$sequence = (SequenceScope)this.L$0;
                        ResultKt.throwOnFailure($result);
                        v0 = $result;
lbl23:
                        // 2 sources

                        index = 1;
                        ** GOTO lbl32
                    }
                    case 2: {
                        index = this.I$0;
                        accumulator = this.L$2;
                        iterator = (Iterator)this.L$1;
                        $this$sequence = (SequenceScope)this.L$0;
                        ResultKt.throwOnFailure($result);
                        v1 = $result;
lbl32:
                        // 2 sources

                        do {
                            if (iterator.hasNext() == false) return Unit.INSTANCE;
                            var6_7 = index++;
                            var7_8 = false;
                            if (var6_7 < 0) {
                                CollectionsKt.throwIndexOverflow();
                            }
                            accumulator = this.$operation.invoke(Boxing.boxInt(var6_7), accumulator, iterator.next());
                            this.L$0 = $this$sequence;
                            this.L$1 = iterator;
                            this.L$2 = accumulator;
                            this.I$0 = index;
                            this.label = 2;
                        } while ((v1 = $this$sequence.yield(accumulator, this)) != var8_2);
                        return var8_2;
                    }
                }
                throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
            }
            {
                this.$this_runningReduceIndexed = sequence;
                this.$operation = function3;
                super(2, continuation);
            }

            @NotNull
            public final Continuation<Unit> create(@Nullable Object value, @NotNull Continuation<?> completion) {
                Intrinsics.checkNotNullParameter(completion, "completion");
                Function2<SequenceScope<? super S>, Continuation<? super Unit>, Object> function2 = new /* invalid duplicate definition of identical inner class */;
                SequenceScope sequenceScope = function2.p$ = (SequenceScope)value;
                return function2;
            }

            public final Object invoke(Object object, Object object2) {
                return (this.create(object, (Continuation)object2)).invokeSuspend(Unit.INSTANCE);
            }
        });
    }

    @SinceKotlin(version="1.4")
    @WasExperimental(markerClass={ExperimentalStdlibApi.class})
    @NotNull
    public static final <T, R> Sequence<R> scan(@NotNull Sequence<? extends T> $this$scan, R initial, @NotNull Function2<? super R, ? super T, ? extends R> operation) {
        Intrinsics.checkNotNullParameter($this$scan, "$this$scan");
        Intrinsics.checkNotNullParameter(operation, "operation");
        return SequencesKt.runningFold($this$scan, initial, operation);
    }

    @SinceKotlin(version="1.4")
    @WasExperimental(markerClass={ExperimentalStdlibApi.class})
    @NotNull
    public static final <T, R> Sequence<R> scanIndexed(@NotNull Sequence<? extends T> $this$scanIndexed, R initial, @NotNull Function3<? super Integer, ? super R, ? super T, ? extends R> operation) {
        Intrinsics.checkNotNullParameter($this$scanIndexed, "$this$scanIndexed");
        Intrinsics.checkNotNullParameter(operation, "operation");
        return SequencesKt.runningFoldIndexed($this$scanIndexed, initial, operation);
    }

    @Deprecated(message="Use runningReduce instead.", replaceWith=@ReplaceWith(imports={}, expression="runningReduce(operation)"), level=DeprecationLevel.ERROR)
    @SinceKotlin(version="1.3")
    @ExperimentalStdlibApi
    @NotNull
    public static final <S, T extends S> Sequence<S> scanReduce(@NotNull Sequence<? extends T> $this$scanReduce, @NotNull Function2<? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkNotNullParameter($this$scanReduce, "$this$scanReduce");
        Intrinsics.checkNotNullParameter(operation, "operation");
        return SequencesKt.runningReduce($this$scanReduce, operation);
    }

    @Deprecated(message="Use runningReduceIndexed instead.", replaceWith=@ReplaceWith(imports={}, expression="runningReduceIndexed(operation)"), level=DeprecationLevel.ERROR)
    @SinceKotlin(version="1.3")
    @ExperimentalStdlibApi
    @NotNull
    public static final <S, T extends S> Sequence<S> scanReduceIndexed(@NotNull Sequence<? extends T> $this$scanReduceIndexed, @NotNull Function3<? super Integer, ? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkNotNullParameter($this$scanReduceIndexed, "$this$scanReduceIndexed");
        Intrinsics.checkNotNullParameter(operation, "operation");
        return SequencesKt.runningReduceIndexed($this$scanReduceIndexed, operation);
    }

    public static final <T> int sumBy(@NotNull Sequence<? extends T> $this$sumBy, @NotNull Function1<? super T, Integer> selector) {
        int $i$f$sumBy = 0;
        Intrinsics.checkNotNullParameter($this$sumBy, "$this$sumBy");
        Intrinsics.checkNotNullParameter(selector, "selector");
        int sum = 0;
        Iterator<T> iterator2 = $this$sumBy.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            sum += ((Number)selector.invoke(element)).intValue();
        }
        return sum;
    }

    public static final <T> double sumByDouble(@NotNull Sequence<? extends T> $this$sumByDouble, @NotNull Function1<? super T, Double> selector) {
        int $i$f$sumByDouble = 0;
        Intrinsics.checkNotNullParameter($this$sumByDouble, "$this$sumByDouble");
        Intrinsics.checkNotNullParameter(selector, "selector");
        double sum = 0.0;
        Iterator<T> iterator2 = $this$sumByDouble.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            sum += ((Number)selector.invoke(element)).doubleValue();
        }
        return sum;
    }

    @SinceKotlin(version="1.4")
    @OverloadResolutionByLambdaReturnType
    @JvmName(name="sumOfDouble")
    @InlineOnly
    private static final <T> double sumOfDouble(Sequence<? extends T> $this$sumOf, Function1<? super T, Double> selector) {
        int $i$f$sumOfDouble = 0;
        double sum = 0.0;
        Iterator<T> iterator2 = $this$sumOf.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            sum += ((Number)selector.invoke(element)).doubleValue();
        }
        return sum;
    }

    @SinceKotlin(version="1.4")
    @OverloadResolutionByLambdaReturnType
    @JvmName(name="sumOfInt")
    @InlineOnly
    private static final <T> int sumOfInt(Sequence<? extends T> $this$sumOf, Function1<? super T, Integer> selector) {
        int $i$f$sumOfInt = 0;
        int sum = 0;
        Iterator<T> iterator2 = $this$sumOf.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            sum += ((Number)selector.invoke(element)).intValue();
        }
        return sum;
    }

    @SinceKotlin(version="1.4")
    @OverloadResolutionByLambdaReturnType
    @JvmName(name="sumOfLong")
    @InlineOnly
    private static final <T> long sumOfLong(Sequence<? extends T> $this$sumOf, Function1<? super T, Long> selector) {
        int $i$f$sumOfLong = 0;
        long sum = 0L;
        Iterator<T> iterator2 = $this$sumOf.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            sum += ((Number)selector.invoke(element)).longValue();
        }
        return sum;
    }

    @SinceKotlin(version="1.4")
    @OverloadResolutionByLambdaReturnType
    @JvmName(name="sumOfUInt")
    @ExperimentalUnsignedTypes
    @InlineOnly
    private static final <T> int sumOfUInt(Sequence<? extends T> $this$sumOf, Function1<? super T, UInt> selector) {
        int $i$f$sumOfUInt = 0;
        int n = 0;
        boolean bl = false;
        int sum = UInt.constructor-impl(n);
        Iterator<T> iterator2 = $this$sumOf.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            int n2 = sum;
            int n3 = selector.invoke(element).unbox-impl();
            boolean bl2 = false;
            sum = UInt.constructor-impl(n2 + n3);
        }
        return sum;
    }

    @SinceKotlin(version="1.4")
    @OverloadResolutionByLambdaReturnType
    @JvmName(name="sumOfULong")
    @ExperimentalUnsignedTypes
    @InlineOnly
    private static final <T> long sumOfULong(Sequence<? extends T> $this$sumOf, Function1<? super T, ULong> selector) {
        int $i$f$sumOfULong = 0;
        int n = 0;
        boolean bl = false;
        long sum = ULong.constructor-impl(n);
        Iterator<T> iterator2 = $this$sumOf.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            long l = sum;
            long l2 = selector.invoke(element).unbox-impl();
            boolean bl2 = false;
            sum = ULong.constructor-impl(l + l2);
        }
        return sum;
    }

    @NotNull
    public static final <T> Sequence<T> requireNoNulls(@NotNull Sequence<? extends T> $this$requireNoNulls) {
        Intrinsics.checkNotNullParameter($this$requireNoNulls, "$this$requireNoNulls");
        return SequencesKt.map($this$requireNoNulls, new Function1<T, T>($this$requireNoNulls){
            final /* synthetic */ Sequence $this_requireNoNulls;

            @NotNull
            public final T invoke(@Nullable T it) {
                T t = it;
                if (t == null) {
                    throw (Throwable)new IllegalArgumentException("null element found in " + this.$this_requireNoNulls + '.');
                }
                return t;
            }
            {
                this.$this_requireNoNulls = sequence;
                super(1);
            }
        });
    }

    @SinceKotlin(version="1.2")
    @NotNull
    public static final <T> Sequence<List<T>> chunked(@NotNull Sequence<? extends T> $this$chunked, int size) {
        Intrinsics.checkNotNullParameter($this$chunked, "$this$chunked");
        return SequencesKt.windowed($this$chunked, size, size, true);
    }

    @SinceKotlin(version="1.2")
    @NotNull
    public static final <T, R> Sequence<R> chunked(@NotNull Sequence<? extends T> $this$chunked, int size, @NotNull Function1<? super List<? extends T>, ? extends R> transform) {
        Intrinsics.checkNotNullParameter($this$chunked, "$this$chunked");
        Intrinsics.checkNotNullParameter(transform, "transform");
        return SequencesKt.windowed($this$chunked, size, size, true, transform);
    }

    @NotNull
    public static final <T> Sequence<T> minus(@NotNull Sequence<? extends T> $this$minus, T element) {
        Intrinsics.checkNotNullParameter($this$minus, "$this$minus");
        return new Sequence<T>($this$minus, element){
            final /* synthetic */ Sequence $this_minus;
            final /* synthetic */ Object $element;

            /*
             * WARNING - void declaration
             */
            @NotNull
            public Iterator<T> iterator() {
                void removed;
                Ref.BooleanRef booleanRef = new Ref.BooleanRef();
                booleanRef.element = false;
                return SequencesKt.filter(this.$this_minus, (Function1)new Function1<T, Boolean>(this, (Ref.BooleanRef)removed){
                    final /* synthetic */ minus.1 this$0;
                    final /* synthetic */ Ref.BooleanRef $removed;

                    public final boolean invoke(T it) {
                        boolean bl;
                        if (!this.$removed.element && Intrinsics.areEqual(it, this.this$0.$element)) {
                            this.$removed.element = true;
                            bl = false;
                        } else {
                            bl = true;
                        }
                        return bl;
                    }
                    {
                        this.this$0 = var1_1;
                        this.$removed = booleanRef;
                        super(1);
                    }
                }).iterator();
            }
            {
                this.$this_minus = $receiver;
                this.$element = $captured_local_variable$1;
            }
        };
    }

    @NotNull
    public static final <T> Sequence<T> minus(@NotNull Sequence<? extends T> $this$minus, @NotNull T[] elements) {
        Intrinsics.checkNotNullParameter($this$minus, "$this$minus");
        Intrinsics.checkNotNullParameter(elements, "elements");
        T[] arrT = elements;
        boolean bl = false;
        if (arrT.length == 0) {
            return $this$minus;
        }
        return new Sequence<T>($this$minus, elements){
            final /* synthetic */ Sequence $this_minus;
            final /* synthetic */ Object[] $elements;

            @NotNull
            public Iterator<T> iterator() {
                HashSet<Object> other = ArraysKt.toHashSet(this.$elements);
                return SequencesKt.filterNot(this.$this_minus, (Function1)new Function1<T, Boolean>(other){
                    final /* synthetic */ HashSet $other;

                    public final boolean invoke(T it) {
                        return this.$other.contains(it);
                    }
                    {
                        this.$other = hashSet;
                        super(1);
                    }
                }).iterator();
            }
            {
                this.$this_minus = $receiver;
                this.$elements = $captured_local_variable$1;
            }
        };
    }

    @NotNull
    public static final <T> Sequence<T> minus(@NotNull Sequence<? extends T> $this$minus, @NotNull Iterable<? extends T> elements) {
        Intrinsics.checkNotNullParameter($this$minus, "$this$minus");
        Intrinsics.checkNotNullParameter(elements, "elements");
        return new Sequence<T>($this$minus, elements){
            final /* synthetic */ Sequence $this_minus;
            final /* synthetic */ Iterable $elements;

            @NotNull
            public Iterator<T> iterator() {
                Collection<T> other = CollectionsKt.convertToSetForSetOperation(this.$elements);
                if (other.isEmpty()) {
                    return this.$this_minus.iterator();
                }
                return SequencesKt.filterNot(this.$this_minus, (Function1)new Function1<T, Boolean>(other){
                    final /* synthetic */ Collection $other;

                    public final boolean invoke(T it) {
                        return this.$other.contains(it);
                    }
                    {
                        this.$other = collection;
                        super(1);
                    }
                }).iterator();
            }
            {
                this.$this_minus = $receiver;
                this.$elements = $captured_local_variable$1;
            }
        };
    }

    @NotNull
    public static final <T> Sequence<T> minus(@NotNull Sequence<? extends T> $this$minus, @NotNull Sequence<? extends T> elements) {
        Intrinsics.checkNotNullParameter($this$minus, "$this$minus");
        Intrinsics.checkNotNullParameter(elements, "elements");
        return new Sequence<T>($this$minus, elements){
            final /* synthetic */ Sequence $this_minus;
            final /* synthetic */ Sequence $elements;

            @NotNull
            public Iterator<T> iterator() {
                HashSet<T> other = SequencesKt.toHashSet(this.$elements);
                if (other.isEmpty()) {
                    return this.$this_minus.iterator();
                }
                return SequencesKt.filterNot(this.$this_minus, (Function1)new Function1<T, Boolean>(other){
                    final /* synthetic */ HashSet $other;

                    public final boolean invoke(T it) {
                        return this.$other.contains(it);
                    }
                    {
                        this.$other = hashSet;
                        super(1);
                    }
                }).iterator();
            }
            {
                this.$this_minus = $receiver;
                this.$elements = $captured_local_variable$1;
            }
        };
    }

    @InlineOnly
    private static final <T> Sequence<T> minusElement(Sequence<? extends T> $this$minusElement, T element) {
        int $i$f$minusElement = 0;
        return SequencesKt.minus($this$minusElement, element);
    }

    @NotNull
    public static final <T> Pair<List<T>, List<T>> partition(@NotNull Sequence<? extends T> $this$partition, @NotNull Function1<? super T, Boolean> predicate) {
        int $i$f$partition = 0;
        Intrinsics.checkNotNullParameter($this$partition, "$this$partition");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        ArrayList<T> first = new ArrayList<T>();
        ArrayList<T> second = new ArrayList<T>();
        Iterator<T> iterator2 = $this$partition.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            if (predicate.invoke(element).booleanValue()) {
                first.add(element);
                continue;
            }
            second.add(element);
        }
        return new Pair<List<T>, List<T>>(first, second);
    }

    @NotNull
    public static final <T> Sequence<T> plus(@NotNull Sequence<? extends T> $this$plus, T element) {
        Intrinsics.checkNotNullParameter($this$plus, "$this$plus");
        return SequencesKt.flatten(SequencesKt.sequenceOf($this$plus, SequencesKt.sequenceOf(element)));
    }

    @NotNull
    public static final <T> Sequence<T> plus(@NotNull Sequence<? extends T> $this$plus, @NotNull T[] elements) {
        Intrinsics.checkNotNullParameter($this$plus, "$this$plus");
        Intrinsics.checkNotNullParameter(elements, "elements");
        return SequencesKt.plus($this$plus, (Iterable)ArraysKt.asList(elements));
    }

    @NotNull
    public static final <T> Sequence<T> plus(@NotNull Sequence<? extends T> $this$plus, @NotNull Iterable<? extends T> elements) {
        Intrinsics.checkNotNullParameter($this$plus, "$this$plus");
        Intrinsics.checkNotNullParameter(elements, "elements");
        return SequencesKt.flatten(SequencesKt.sequenceOf($this$plus, CollectionsKt.asSequence(elements)));
    }

    @NotNull
    public static final <T> Sequence<T> plus(@NotNull Sequence<? extends T> $this$plus, @NotNull Sequence<? extends T> elements) {
        Intrinsics.checkNotNullParameter($this$plus, "$this$plus");
        Intrinsics.checkNotNullParameter(elements, "elements");
        return SequencesKt.flatten(SequencesKt.sequenceOf($this$plus, elements));
    }

    @InlineOnly
    private static final <T> Sequence<T> plusElement(Sequence<? extends T> $this$plusElement, T element) {
        int $i$f$plusElement = 0;
        return SequencesKt.plus($this$plusElement, element);
    }

    @SinceKotlin(version="1.2")
    @NotNull
    public static final <T> Sequence<List<T>> windowed(@NotNull Sequence<? extends T> $this$windowed, int size, int step, boolean partialWindows) {
        Intrinsics.checkNotNullParameter($this$windowed, "$this$windowed");
        return SlidingWindowKt.windowedSequence($this$windowed, size, step, partialWindows, false);
    }

    public static /* synthetic */ Sequence windowed$default(Sequence sequence, int n, int n2, boolean bl, int n3, Object object) {
        if ((n3 & 2) != 0) {
            n2 = 1;
        }
        if ((n3 & 4) != 0) {
            bl = false;
        }
        return SequencesKt.windowed(sequence, n, n2, bl);
    }

    @SinceKotlin(version="1.2")
    @NotNull
    public static final <T, R> Sequence<R> windowed(@NotNull Sequence<? extends T> $this$windowed, int size, int step, boolean partialWindows, @NotNull Function1<? super List<? extends T>, ? extends R> transform) {
        Intrinsics.checkNotNullParameter($this$windowed, "$this$windowed");
        Intrinsics.checkNotNullParameter(transform, "transform");
        return SequencesKt.map(SlidingWindowKt.windowedSequence($this$windowed, size, step, partialWindows, true), transform);
    }

    public static /* synthetic */ Sequence windowed$default(Sequence sequence, int n, int n2, boolean bl, Function1 function1, int n3, Object object) {
        if ((n3 & 2) != 0) {
            n2 = 1;
        }
        if ((n3 & 4) != 0) {
            bl = false;
        }
        return SequencesKt.windowed(sequence, n, n2, bl, function1);
    }

    @NotNull
    public static final <T, R> Sequence<Pair<T, R>> zip(@NotNull Sequence<? extends T> $this$zip, @NotNull Sequence<? extends R> other) {
        Intrinsics.checkNotNullParameter($this$zip, "$this$zip");
        Intrinsics.checkNotNullParameter(other, "other");
        return new MergingSequence($this$zip, other, zip.1.INSTANCE);
    }

    @NotNull
    public static final <T, R, V> Sequence<V> zip(@NotNull Sequence<? extends T> $this$zip, @NotNull Sequence<? extends R> other, @NotNull Function2<? super T, ? super R, ? extends V> transform) {
        Intrinsics.checkNotNullParameter($this$zip, "$this$zip");
        Intrinsics.checkNotNullParameter(other, "other");
        Intrinsics.checkNotNullParameter(transform, "transform");
        return new MergingSequence<T, R, V>($this$zip, other, transform);
    }

    @SinceKotlin(version="1.2")
    @NotNull
    public static final <T> Sequence<Pair<T, T>> zipWithNext(@NotNull Sequence<? extends T> $this$zipWithNext) {
        Intrinsics.checkNotNullParameter($this$zipWithNext, "$this$zipWithNext");
        return SequencesKt.zipWithNext($this$zipWithNext, zipWithNext.1.INSTANCE);
    }

    @SinceKotlin(version="1.2")
    @NotNull
    public static final <T, R> Sequence<R> zipWithNext(@NotNull Sequence<? extends T> $this$zipWithNext, @NotNull Function2<? super T, ? super T, ? extends R> transform) {
        Intrinsics.checkNotNullParameter($this$zipWithNext, "$this$zipWithNext");
        Intrinsics.checkNotNullParameter(transform, "transform");
        return SequencesKt.sequence(new Function2<SequenceScope<? super R>, Continuation<? super Unit>, Object>($this$zipWithNext, transform, null){
            private SequenceScope p$;
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            int label;
            final /* synthetic */ Sequence $this_zipWithNext;
            final /* synthetic */ Function2 $transform;

            /*
             * Unable to fully structure code
             * Enabled aggressive block sorting
             * Lifted jumps to return sites
             */
            @Nullable
            public final Object invokeSuspend(@NotNull Object $result) {
                var6_2 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                switch (this.label) {
                    case 0: {
                        ResultKt.throwOnFailure($result);
                        $this$result = this.p$;
                        iterator = this.$this_zipWithNext.iterator();
                        if (!iterator.hasNext()) {
                            return Unit.INSTANCE;
                        }
                        current = iterator.next();
                        ** GOTO lbl20
                    }
                    case 1: {
                        next = this.L$3;
                        current = this.L$2;
                        iterator = (Iterator)this.L$1;
                        $this$result = (SequenceScope)this.L$0;
                        ResultKt.throwOnFailure($result);
                        v0 = $result;
                        do {
                            current = next;
lbl20:
                            // 2 sources

                            if (iterator.hasNext() == false) return Unit.INSTANCE;
                            next = iterator.next();
                            this.L$0 = $this$result;
                            this.L$1 = iterator;
                            this.L$2 = current;
                            this.L$3 = next;
                            this.label = 1;
                        } while ((v0 = $this$result.yield(this.$transform.invoke(current, next), this)) != var6_2);
                        return var6_2;
                    }
                }
                throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
            }
            {
                this.$this_zipWithNext = sequence;
                this.$transform = function2;
                super(2, continuation);
            }

            @NotNull
            public final Continuation<Unit> create(@Nullable Object value, @NotNull Continuation<?> completion) {
                Intrinsics.checkNotNullParameter(completion, "completion");
                Function2<SequenceScope<? super R>, Continuation<? super Unit>, Object> function2 = new /* invalid duplicate definition of identical inner class */;
                SequenceScope sequenceScope = function2.p$ = (SequenceScope)value;
                return function2;
            }

            public final Object invoke(Object object, Object object2) {
                return (this.create(object, (Continuation)object2)).invokeSuspend(Unit.INSTANCE);
            }
        });
    }

    @NotNull
    public static final <T, A extends Appendable> A joinTo(@NotNull Sequence<? extends T> $this$joinTo, @NotNull A buffer, @NotNull CharSequence separator, @NotNull CharSequence prefix, @NotNull CharSequence postfix, int limit, @NotNull CharSequence truncated, @Nullable Function1<? super T, ? extends CharSequence> transform) {
        Intrinsics.checkNotNullParameter($this$joinTo, "$this$joinTo");
        Intrinsics.checkNotNullParameter(buffer, "buffer");
        Intrinsics.checkNotNullParameter(separator, "separator");
        Intrinsics.checkNotNullParameter(prefix, "prefix");
        Intrinsics.checkNotNullParameter(postfix, "postfix");
        Intrinsics.checkNotNullParameter(truncated, "truncated");
        buffer.append(prefix);
        int count = 0;
        Iterator<T> iterator2 = $this$joinTo.iterator();
        while (iterator2.hasNext()) {
            T element = iterator2.next();
            if (++count > 1) {
                buffer.append(separator);
            }
            if (limit >= 0 && count > limit) break;
            StringsKt.appendElement(buffer, element, transform);
        }
        if (limit >= 0 && count > limit) {
            buffer.append(truncated);
        }
        buffer.append(postfix);
        return buffer;
    }

    public static /* synthetic */ Appendable joinTo$default(Sequence sequence, Appendable appendable, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int n, CharSequence charSequence4, Function1 function1, int n2, Object object) {
        if ((n2 & 2) != 0) {
            charSequence = ", ";
        }
        if ((n2 & 4) != 0) {
            charSequence2 = "";
        }
        if ((n2 & 8) != 0) {
            charSequence3 = "";
        }
        if ((n2 & 0x10) != 0) {
            n = -1;
        }
        if ((n2 & 0x20) != 0) {
            charSequence4 = "...";
        }
        if ((n2 & 0x40) != 0) {
            function1 = null;
        }
        return SequencesKt.joinTo(sequence, appendable, charSequence, charSequence2, charSequence3, n, charSequence4, function1);
    }

    @NotNull
    public static final <T> String joinToString(@NotNull Sequence<? extends T> $this$joinToString, @NotNull CharSequence separator, @NotNull CharSequence prefix, @NotNull CharSequence postfix, int limit, @NotNull CharSequence truncated, @Nullable Function1<? super T, ? extends CharSequence> transform) {
        Intrinsics.checkNotNullParameter($this$joinToString, "$this$joinToString");
        Intrinsics.checkNotNullParameter(separator, "separator");
        Intrinsics.checkNotNullParameter(prefix, "prefix");
        Intrinsics.checkNotNullParameter(postfix, "postfix");
        Intrinsics.checkNotNullParameter(truncated, "truncated");
        String string = ((StringBuilder)SequencesKt.joinTo($this$joinToString, (Appendable)new StringBuilder(), separator, prefix, postfix, limit, truncated, transform)).toString();
        Intrinsics.checkNotNullExpressionValue(string, "joinTo(StringBuilder(), \u2026ed, transform).toString()");
        return string;
    }

    public static /* synthetic */ String joinToString$default(Sequence sequence, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int n, CharSequence charSequence4, Function1 function1, int n2, Object object) {
        if ((n2 & 1) != 0) {
            charSequence = ", ";
        }
        if ((n2 & 2) != 0) {
            charSequence2 = "";
        }
        if ((n2 & 4) != 0) {
            charSequence3 = "";
        }
        if ((n2 & 8) != 0) {
            n = -1;
        }
        if ((n2 & 0x10) != 0) {
            charSequence4 = "...";
        }
        if ((n2 & 0x20) != 0) {
            function1 = null;
        }
        return SequencesKt.joinToString(sequence, charSequence, charSequence2, charSequence3, n, charSequence4, function1);
    }

    @NotNull
    public static final <T> Iterable<T> asIterable(@NotNull Sequence<? extends T> $this$asIterable) {
        Intrinsics.checkNotNullParameter($this$asIterable, "$this$asIterable");
        boolean bl = false;
        return new Iterable<T>($this$asIterable){
            final /* synthetic */ Sequence $this_asIterable$inlined;
            {
                this.$this_asIterable$inlined = sequence;
            }

            @NotNull
            public Iterator<T> iterator() {
                boolean bl = false;
                return this.$this_asIterable$inlined.iterator();
            }
        };
    }

    @InlineOnly
    private static final <T> Sequence<T> asSequence(Sequence<? extends T> $this$asSequence) {
        int $i$f$asSequence = 0;
        return $this$asSequence;
    }

    @JvmName(name="averageOfByte")
    public static final double averageOfByte(@NotNull Sequence<Byte> $this$average) {
        Intrinsics.checkNotNullParameter($this$average, "$this$average");
        double sum = 0.0;
        int count = 0;
        Iterator<Byte> iterator2 = $this$average.iterator();
        while (iterator2.hasNext()) {
            byte element = ((Number)iterator2.next()).byteValue();
            sum += (double)element;
            int n = ++count;
            boolean bl = false;
            if (n >= 0) continue;
            CollectionsKt.throwCountOverflow();
        }
        return count == 0 ? Double.NaN : sum / (double)count;
    }

    @JvmName(name="averageOfShort")
    public static final double averageOfShort(@NotNull Sequence<Short> $this$average) {
        Intrinsics.checkNotNullParameter($this$average, "$this$average");
        double sum = 0.0;
        int count = 0;
        Iterator<Short> iterator2 = $this$average.iterator();
        while (iterator2.hasNext()) {
            short element = ((Number)iterator2.next()).shortValue();
            sum += (double)element;
            int n = ++count;
            boolean bl = false;
            if (n >= 0) continue;
            CollectionsKt.throwCountOverflow();
        }
        return count == 0 ? Double.NaN : sum / (double)count;
    }

    @JvmName(name="averageOfInt")
    public static final double averageOfInt(@NotNull Sequence<Integer> $this$average) {
        Intrinsics.checkNotNullParameter($this$average, "$this$average");
        double sum = 0.0;
        int count = 0;
        Iterator<Integer> iterator2 = $this$average.iterator();
        while (iterator2.hasNext()) {
            int element = ((Number)iterator2.next()).intValue();
            sum += (double)element;
            int n = ++count;
            boolean bl = false;
            if (n >= 0) continue;
            CollectionsKt.throwCountOverflow();
        }
        return count == 0 ? Double.NaN : sum / (double)count;
    }

    @JvmName(name="averageOfLong")
    public static final double averageOfLong(@NotNull Sequence<Long> $this$average) {
        Intrinsics.checkNotNullParameter($this$average, "$this$average");
        double sum = 0.0;
        int count = 0;
        Iterator<Long> iterator2 = $this$average.iterator();
        while (iterator2.hasNext()) {
            long element = ((Number)iterator2.next()).longValue();
            sum += (double)element;
            int n = ++count;
            boolean bl = false;
            if (n >= 0) continue;
            CollectionsKt.throwCountOverflow();
        }
        return count == 0 ? Double.NaN : sum / (double)count;
    }

    @JvmName(name="averageOfFloat")
    public static final double averageOfFloat(@NotNull Sequence<Float> $this$average) {
        Intrinsics.checkNotNullParameter($this$average, "$this$average");
        double sum = 0.0;
        int count = 0;
        Iterator<Float> iterator2 = $this$average.iterator();
        while (iterator2.hasNext()) {
            float element = ((Number)iterator2.next()).floatValue();
            sum += (double)element;
            int n = ++count;
            boolean bl = false;
            if (n >= 0) continue;
            CollectionsKt.throwCountOverflow();
        }
        return count == 0 ? Double.NaN : sum / (double)count;
    }

    @JvmName(name="averageOfDouble")
    public static final double averageOfDouble(@NotNull Sequence<Double> $this$average) {
        Intrinsics.checkNotNullParameter($this$average, "$this$average");
        double sum = 0.0;
        int count = 0;
        Iterator<Double> iterator2 = $this$average.iterator();
        while (iterator2.hasNext()) {
            double element = ((Number)iterator2.next()).doubleValue();
            sum += element;
            int n = ++count;
            boolean bl = false;
            if (n >= 0) continue;
            CollectionsKt.throwCountOverflow();
        }
        return count == 0 ? Double.NaN : sum / (double)count;
    }

    @JvmName(name="sumOfByte")
    public static final int sumOfByte(@NotNull Sequence<Byte> $this$sum) {
        Intrinsics.checkNotNullParameter($this$sum, "$this$sum");
        int sum = 0;
        Iterator<Byte> iterator2 = $this$sum.iterator();
        while (iterator2.hasNext()) {
            byte element = ((Number)iterator2.next()).byteValue();
            sum += element;
        }
        return sum;
    }

    @JvmName(name="sumOfShort")
    public static final int sumOfShort(@NotNull Sequence<Short> $this$sum) {
        Intrinsics.checkNotNullParameter($this$sum, "$this$sum");
        int sum = 0;
        Iterator<Short> iterator2 = $this$sum.iterator();
        while (iterator2.hasNext()) {
            short element = ((Number)iterator2.next()).shortValue();
            sum += element;
        }
        return sum;
    }

    @JvmName(name="sumOfInt")
    public static final int sumOfInt(@NotNull Sequence<Integer> $this$sum) {
        Intrinsics.checkNotNullParameter($this$sum, "$this$sum");
        int sum = 0;
        Iterator<Integer> iterator2 = $this$sum.iterator();
        while (iterator2.hasNext()) {
            int element = ((Number)iterator2.next()).intValue();
            sum += element;
        }
        return sum;
    }

    @JvmName(name="sumOfLong")
    public static final long sumOfLong(@NotNull Sequence<Long> $this$sum) {
        Intrinsics.checkNotNullParameter($this$sum, "$this$sum");
        long sum = 0L;
        Iterator<Long> iterator2 = $this$sum.iterator();
        while (iterator2.hasNext()) {
            long element = ((Number)iterator2.next()).longValue();
            sum += element;
        }
        return sum;
    }

    @JvmName(name="sumOfFloat")
    public static final float sumOfFloat(@NotNull Sequence<Float> $this$sum) {
        Intrinsics.checkNotNullParameter($this$sum, "$this$sum");
        float sum = 0.0f;
        Iterator<Float> iterator2 = $this$sum.iterator();
        while (iterator2.hasNext()) {
            float element = ((Number)iterator2.next()).floatValue();
            sum += element;
        }
        return sum;
    }

    @JvmName(name="sumOfDouble")
    public static final double sumOfDouble(@NotNull Sequence<Double> $this$sum) {
        Intrinsics.checkNotNullParameter($this$sum, "$this$sum");
        double sum = 0.0;
        Iterator<Double> iterator2 = $this$sum.iterator();
        while (iterator2.hasNext()) {
            double element = ((Number)iterator2.next()).doubleValue();
            sum += element;
        }
        return sum;
    }
}

